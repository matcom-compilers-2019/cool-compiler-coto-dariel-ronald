Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> class SEMICOLON program
Rule 2     program -> class SEMICOLON
Rule 3     class -> CLASS TYPE inheritence LBRACE features RBRACE
Rule 4     inheritence -> INHERITS TYPE
Rule 5     inheritence -> empty
Rule 6     features -> feature SEMICOLON features
Rule 7     features -> empty
Rule 8     feature -> method_declaration
Rule 9     feature -> attribute
Rule 10    attribute -> id_type
Rule 11    attribute -> id_type ASSIGN expression
Rule 12    id_type -> ID TDOTS TYPE
Rule 13    method_declaration -> ID LBRACKET formals RBRACKET TDOTS TYPE LBRACE expression RBRACE
Rule 14    formals -> id_type COMMA formals
Rule 15    formals -> id_type
Rule 16    formals -> empty
Rule 17    expression_list -> expression SEMICOLON expression_list
Rule 18    expression_list -> expression SEMICOLON
Rule 19    expression -> NOT expression
Rule 20    expression -> expression LTHAN expression
Rule 21    expression -> expression LETHAN expression
Rule 22    expression -> expression EQUALS expression
Rule 23    expression -> expression PLUS expression
Rule 24    expression -> expression MINUS expression
Rule 25    expression -> expression TIMES expression
Rule 26    expression -> expression DIVIDE expression
Rule 27    expression -> MINUS expression
Rule 28    expression -> LBRACKET expression RBRACKET
Rule 29    expression -> ISVOID expression
Rule 30    expression -> block
Rule 31    expression -> conditional
Rule 32    expression -> loop
Rule 33    expression -> case
Rule 34    expression -> dispatch
Rule 35    expression -> BCOMPLEMENT expression
Rule 36    block -> LBRACE expression_list RBRACE
Rule 37    expression -> ID
Rule 38    expression -> INTEGER
Rule 39    expression -> STRING
Rule 40    expression -> TRUE
Rule 41    expression -> FALSE
Rule 42    expression -> NEW TYPE
Rule 43    expression -> MINUS let_expression
Rule 44    expression -> let_expression
Rule 45    dispatch -> expression especific DOT dispatch_call
Rule 46    dispatch -> dispatch_call
Rule 47    especific -> DISP TYPE
Rule 48    especific -> empty
Rule 49    dispatch_call -> ID LBRACKET params_expression RBRACKET
Rule 50    params_expression -> expression
Rule 51    params_expression -> expression COMMA params_expression
Rule 52    params_expression -> empty
Rule 53    empty -> <empty>
Rule 54    let_expression -> LET declaration_list IN expression
Rule 55    declaration_list -> attribute COMMA declaration_list
Rule 56    declaration_list -> attribute
Rule 57    conditional -> IF expression THEN expression ELSE expression FI
Rule 58    loop -> WHILE expression LOOP expression POOL
Rule 59    case -> CASE expression OF implications ESAC
Rule 60    implications -> implication SEMICOLON implications
Rule 61    implications -> implication SEMICOLON
Rule 62    implication -> id_type IMPLY expression
Rule 63    expression -> ID ASSIGN expression

Terminals, with rules where they appear

ASSIGN               : 11 63
BCOMPLEMENT          : 35
CASE                 : 59
CLASS                : 3
COMMA                : 14 51 55
DISP                 : 47
DIVIDE               : 26
DOT                  : 45
ELSE                 : 57
EQUALS               : 22
ESAC                 : 59
FALSE                : 41
FI                   : 57
ID                   : 12 13 37 49 63
IF                   : 57
IMPLY                : 62
IN                   : 54
INHERITS             : 4
INTEGER              : 38
ISVOID               : 29
LBRACE               : 3 13 36
LBRACKET             : 13 28 49
LET                  : 54
LETHAN               : 21
LOOP                 : 58
LTHAN                : 20
MINUS                : 24 27 43
NEW                  : 42
NOT                  : 19
OF                   : 59
PLUS                 : 23
POOL                 : 58
RBRACE               : 3 13 36
RBRACKET             : 13 28 49
SEMICOLON            : 1 2 6 17 18 60 61
STRING               : 39
TDOTS                : 12 13
THEN                 : 57
TIMES                : 25
TRUE                 : 40
TYPE                 : 3 4 12 13 42 47
WHILE                : 58
error                : 

Nonterminals, with rules where they appear

attribute            : 9 55 56
block                : 30
case                 : 33
class                : 1 2
conditional          : 31
declaration_list     : 54 55
dispatch             : 34
dispatch_call        : 45 46
empty                : 5 7 16 48 52
especific            : 45
expression           : 11 13 17 18 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 28 29 35 45 50 51 54 57 57 57 58 58 59 62 63
expression_list      : 17 36
feature              : 6
features             : 3 6
formals              : 13 14
id_type              : 10 11 14 15 62
implication          : 60 61
implications         : 59 60
inheritence          : 3
let_expression       : 43 44
loop                 : 32
method_declaration   : 8
params_expression    : 49 51
program              : 1 0

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . class SEMICOLON program
    (2) program -> . class SEMICOLON
    (3) class -> . CLASS TYPE inheritence LBRACE features RBRACE

    CLASS           shift and go to state 3

    program                        shift and go to state 1
    class                          shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> class . SEMICOLON program
    (2) program -> class . SEMICOLON

    SEMICOLON       shift and go to state 4


state 3

    (3) class -> CLASS . TYPE inheritence LBRACE features RBRACE

    TYPE            shift and go to state 5


state 4

    (1) program -> class SEMICOLON . program
    (2) program -> class SEMICOLON .
    (1) program -> . class SEMICOLON program
    (2) program -> . class SEMICOLON
    (3) class -> . CLASS TYPE inheritence LBRACE features RBRACE

    $end            reduce using rule 2 (program -> class SEMICOLON .)
    CLASS           shift and go to state 3

    class                          shift and go to state 2
    program                        shift and go to state 6

state 5

    (3) class -> CLASS TYPE . inheritence LBRACE features RBRACE
    (4) inheritence -> . INHERITS TYPE
    (5) inheritence -> . empty
    (53) empty -> .

    INHERITS        shift and go to state 8
    LBRACE          reduce using rule 53 (empty -> .)

    inheritence                    shift and go to state 7
    empty                          shift and go to state 9

state 6

    (1) program -> class SEMICOLON program .

    $end            reduce using rule 1 (program -> class SEMICOLON program .)


state 7

    (3) class -> CLASS TYPE inheritence . LBRACE features RBRACE

    LBRACE          shift and go to state 10


state 8

    (4) inheritence -> INHERITS . TYPE

    TYPE            shift and go to state 11


state 9

    (5) inheritence -> empty .

    LBRACE          reduce using rule 5 (inheritence -> empty .)


state 10

    (3) class -> CLASS TYPE inheritence LBRACE . features RBRACE
    (6) features -> . feature SEMICOLON features
    (7) features -> . empty
    (8) feature -> . method_declaration
    (9) feature -> . attribute
    (53) empty -> .
    (13) method_declaration -> . ID LBRACKET formals RBRACKET TDOTS TYPE LBRACE expression RBRACE
    (10) attribute -> . id_type
    (11) attribute -> . id_type ASSIGN expression
    (12) id_type -> . ID TDOTS TYPE

    RBRACE          reduce using rule 53 (empty -> .)
    ID              shift and go to state 17

    features                       shift and go to state 12
    feature                        shift and go to state 13
    empty                          shift and go to state 14
    method_declaration             shift and go to state 15
    attribute                      shift and go to state 16
    id_type                        shift and go to state 18

state 11

    (4) inheritence -> INHERITS TYPE .

    LBRACE          reduce using rule 4 (inheritence -> INHERITS TYPE .)


state 12

    (3) class -> CLASS TYPE inheritence LBRACE features . RBRACE

    RBRACE          shift and go to state 19


state 13

    (6) features -> feature . SEMICOLON features

    SEMICOLON       shift and go to state 20


state 14

    (7) features -> empty .

    RBRACE          reduce using rule 7 (features -> empty .)


state 15

    (8) feature -> method_declaration .

    SEMICOLON       reduce using rule 8 (feature -> method_declaration .)


state 16

    (9) feature -> attribute .

    SEMICOLON       reduce using rule 9 (feature -> attribute .)


state 17

    (13) method_declaration -> ID . LBRACKET formals RBRACKET TDOTS TYPE LBRACE expression RBRACE
    (12) id_type -> ID . TDOTS TYPE

    LBRACKET        shift and go to state 21
    TDOTS           shift and go to state 22


state 18

    (10) attribute -> id_type .
    (11) attribute -> id_type . ASSIGN expression

    SEMICOLON       reduce using rule 10 (attribute -> id_type .)
    COMMA           reduce using rule 10 (attribute -> id_type .)
    IN              reduce using rule 10 (attribute -> id_type .)
    ASSIGN          shift and go to state 23


state 19

    (3) class -> CLASS TYPE inheritence LBRACE features RBRACE .

    SEMICOLON       reduce using rule 3 (class -> CLASS TYPE inheritence LBRACE features RBRACE .)


state 20

    (6) features -> feature SEMICOLON . features
    (6) features -> . feature SEMICOLON features
    (7) features -> . empty
    (8) feature -> . method_declaration
    (9) feature -> . attribute
    (53) empty -> .
    (13) method_declaration -> . ID LBRACKET formals RBRACKET TDOTS TYPE LBRACE expression RBRACE
    (10) attribute -> . id_type
    (11) attribute -> . id_type ASSIGN expression
    (12) id_type -> . ID TDOTS TYPE

    RBRACE          reduce using rule 53 (empty -> .)
    ID              shift and go to state 17

    feature                        shift and go to state 13
    features                       shift and go to state 24
    empty                          shift and go to state 14
    method_declaration             shift and go to state 15
    attribute                      shift and go to state 16
    id_type                        shift and go to state 18

state 21

    (13) method_declaration -> ID LBRACKET . formals RBRACKET TDOTS TYPE LBRACE expression RBRACE
    (14) formals -> . id_type COMMA formals
    (15) formals -> . id_type
    (16) formals -> . empty
    (12) id_type -> . ID TDOTS TYPE
    (53) empty -> .

    ID              shift and go to state 25
    RBRACKET        reduce using rule 53 (empty -> .)

    formals                        shift and go to state 26
    id_type                        shift and go to state 27
    empty                          shift and go to state 28

state 22

    (12) id_type -> ID TDOTS . TYPE

    TYPE            shift and go to state 29


state 23

    (11) attribute -> id_type ASSIGN . expression
    (19) expression -> . NOT expression
    (20) expression -> . expression LTHAN expression
    (21) expression -> . expression LETHAN expression
    (22) expression -> . expression EQUALS expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . MINUS expression
    (28) expression -> . LBRACKET expression RBRACKET
    (29) expression -> . ISVOID expression
    (30) expression -> . block
    (31) expression -> . conditional
    (32) expression -> . loop
    (33) expression -> . case
    (34) expression -> . dispatch
    (35) expression -> . BCOMPLEMENT expression
    (37) expression -> . ID
    (38) expression -> . INTEGER
    (39) expression -> . STRING
    (40) expression -> . TRUE
    (41) expression -> . FALSE
    (42) expression -> . NEW TYPE
    (43) expression -> . MINUS let_expression
    (44) expression -> . let_expression
    (63) expression -> . ID ASSIGN expression
    (36) block -> . LBRACE expression_list RBRACE
    (57) conditional -> . IF expression THEN expression ELSE expression FI
    (58) loop -> . WHILE expression LOOP expression POOL
    (59) case -> . CASE expression OF implications ESAC
    (45) dispatch -> . expression especific DOT dispatch_call
    (46) dispatch -> . dispatch_call
    (54) let_expression -> . LET declaration_list IN expression
    (49) dispatch_call -> . ID LBRACKET params_expression RBRACKET

    NOT             shift and go to state 31
    MINUS           shift and go to state 32
    LBRACKET        shift and go to state 33
    ISVOID          shift and go to state 34
    BCOMPLEMENT     shift and go to state 40
    ID              shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NEW             shift and go to state 46
    LBRACE          shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    CASE            shift and go to state 51
    LET             shift and go to state 53

    expression                     shift and go to state 30
    block                          shift and go to state 35
    conditional                    shift and go to state 36
    loop                           shift and go to state 37
    case                           shift and go to state 38
    dispatch                       shift and go to state 39
    let_expression                 shift and go to state 47
    dispatch_call                  shift and go to state 52

state 24

    (6) features -> feature SEMICOLON features .

    RBRACE          reduce using rule 6 (features -> feature SEMICOLON features .)


state 25

    (12) id_type -> ID . TDOTS TYPE

    TDOTS           shift and go to state 22


state 26

    (13) method_declaration -> ID LBRACKET formals . RBRACKET TDOTS TYPE LBRACE expression RBRACE

    RBRACKET        shift and go to state 54


state 27

    (14) formals -> id_type . COMMA formals
    (15) formals -> id_type .

    COMMA           shift and go to state 55
    RBRACKET        reduce using rule 15 (formals -> id_type .)


state 28

    (16) formals -> empty .

    RBRACKET        reduce using rule 16 (formals -> empty .)


state 29

    (12) id_type -> ID TDOTS TYPE .

    ASSIGN          reduce using rule 12 (id_type -> ID TDOTS TYPE .)
    SEMICOLON       reduce using rule 12 (id_type -> ID TDOTS TYPE .)
    COMMA           reduce using rule 12 (id_type -> ID TDOTS TYPE .)
    RBRACKET        reduce using rule 12 (id_type -> ID TDOTS TYPE .)
    IN              reduce using rule 12 (id_type -> ID TDOTS TYPE .)
    IMPLY           reduce using rule 12 (id_type -> ID TDOTS TYPE .)


state 30

    (11) attribute -> id_type ASSIGN expression .
    (20) expression -> expression . LTHAN expression
    (21) expression -> expression . LETHAN expression
    (22) expression -> expression . EQUALS expression
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (45) dispatch -> expression . especific DOT dispatch_call
    (47) especific -> . DISP TYPE
    (48) especific -> . empty
    (53) empty -> .

    SEMICOLON       reduce using rule 11 (attribute -> id_type ASSIGN expression .)
    COMMA           reduce using rule 11 (attribute -> id_type ASSIGN expression .)
    IN              reduce using rule 11 (attribute -> id_type ASSIGN expression .)
    LTHAN           shift and go to state 56
    LETHAN          shift and go to state 57
    EQUALS          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    DISP            shift and go to state 64
    DOT             reduce using rule 53 (empty -> .)

    especific                      shift and go to state 63
    empty                          shift and go to state 65

state 31

    (19) expression -> NOT . expression
    (19) expression -> . NOT expression
    (20) expression -> . expression LTHAN expression
    (21) expression -> . expression LETHAN expression
    (22) expression -> . expression EQUALS expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . MINUS expression
    (28) expression -> . LBRACKET expression RBRACKET
    (29) expression -> . ISVOID expression
    (30) expression -> . block
    (31) expression -> . conditional
    (32) expression -> . loop
    (33) expression -> . case
    (34) expression -> . dispatch
    (35) expression -> . BCOMPLEMENT expression
    (37) expression -> . ID
    (38) expression -> . INTEGER
    (39) expression -> . STRING
    (40) expression -> . TRUE
    (41) expression -> . FALSE
    (42) expression -> . NEW TYPE
    (43) expression -> . MINUS let_expression
    (44) expression -> . let_expression
    (63) expression -> . ID ASSIGN expression
    (36) block -> . LBRACE expression_list RBRACE
    (57) conditional -> . IF expression THEN expression ELSE expression FI
    (58) loop -> . WHILE expression LOOP expression POOL
    (59) case -> . CASE expression OF implications ESAC
    (45) dispatch -> . expression especific DOT dispatch_call
    (46) dispatch -> . dispatch_call
    (54) let_expression -> . LET declaration_list IN expression
    (49) dispatch_call -> . ID LBRACKET params_expression RBRACKET

    NOT             shift and go to state 31
    MINUS           shift and go to state 32
    LBRACKET        shift and go to state 33
    ISVOID          shift and go to state 34
    BCOMPLEMENT     shift and go to state 40
    ID              shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NEW             shift and go to state 46
    LBRACE          shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    CASE            shift and go to state 51
    LET             shift and go to state 53

    expression                     shift and go to state 66
    block                          shift and go to state 35
    conditional                    shift and go to state 36
    loop                           shift and go to state 37
    case                           shift and go to state 38
    dispatch                       shift and go to state 39
    let_expression                 shift and go to state 47
    dispatch_call                  shift and go to state 52

state 32

    (27) expression -> MINUS . expression
    (43) expression -> MINUS . let_expression
    (19) expression -> . NOT expression
    (20) expression -> . expression LTHAN expression
    (21) expression -> . expression LETHAN expression
    (22) expression -> . expression EQUALS expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . MINUS expression
    (28) expression -> . LBRACKET expression RBRACKET
    (29) expression -> . ISVOID expression
    (30) expression -> . block
    (31) expression -> . conditional
    (32) expression -> . loop
    (33) expression -> . case
    (34) expression -> . dispatch
    (35) expression -> . BCOMPLEMENT expression
    (37) expression -> . ID
    (38) expression -> . INTEGER
    (39) expression -> . STRING
    (40) expression -> . TRUE
    (41) expression -> . FALSE
    (42) expression -> . NEW TYPE
    (43) expression -> . MINUS let_expression
    (44) expression -> . let_expression
    (63) expression -> . ID ASSIGN expression
    (54) let_expression -> . LET declaration_list IN expression
    (36) block -> . LBRACE expression_list RBRACE
    (57) conditional -> . IF expression THEN expression ELSE expression FI
    (58) loop -> . WHILE expression LOOP expression POOL
    (59) case -> . CASE expression OF implications ESAC
    (45) dispatch -> . expression especific DOT dispatch_call
    (46) dispatch -> . dispatch_call
    (49) dispatch_call -> . ID LBRACKET params_expression RBRACKET

    NOT             shift and go to state 31
    MINUS           shift and go to state 32
    LBRACKET        shift and go to state 33
    ISVOID          shift and go to state 34
    BCOMPLEMENT     shift and go to state 40
    ID              shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NEW             shift and go to state 46
    LET             shift and go to state 53
    LBRACE          shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    CASE            shift and go to state 51

    expression                     shift and go to state 67
    let_expression                 shift and go to state 68
    block                          shift and go to state 35
    conditional                    shift and go to state 36
    loop                           shift and go to state 37
    case                           shift and go to state 38
    dispatch                       shift and go to state 39
    dispatch_call                  shift and go to state 52

state 33

    (28) expression -> LBRACKET . expression RBRACKET
    (19) expression -> . NOT expression
    (20) expression -> . expression LTHAN expression
    (21) expression -> . expression LETHAN expression
    (22) expression -> . expression EQUALS expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . MINUS expression
    (28) expression -> . LBRACKET expression RBRACKET
    (29) expression -> . ISVOID expression
    (30) expression -> . block
    (31) expression -> . conditional
    (32) expression -> . loop
    (33) expression -> . case
    (34) expression -> . dispatch
    (35) expression -> . BCOMPLEMENT expression
    (37) expression -> . ID
    (38) expression -> . INTEGER
    (39) expression -> . STRING
    (40) expression -> . TRUE
    (41) expression -> . FALSE
    (42) expression -> . NEW TYPE
    (43) expression -> . MINUS let_expression
    (44) expression -> . let_expression
    (63) expression -> . ID ASSIGN expression
    (36) block -> . LBRACE expression_list RBRACE
    (57) conditional -> . IF expression THEN expression ELSE expression FI
    (58) loop -> . WHILE expression LOOP expression POOL
    (59) case -> . CASE expression OF implications ESAC
    (45) dispatch -> . expression especific DOT dispatch_call
    (46) dispatch -> . dispatch_call
    (54) let_expression -> . LET declaration_list IN expression
    (49) dispatch_call -> . ID LBRACKET params_expression RBRACKET

    NOT             shift and go to state 31
    MINUS           shift and go to state 32
    LBRACKET        shift and go to state 33
    ISVOID          shift and go to state 34
    BCOMPLEMENT     shift and go to state 40
    ID              shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NEW             shift and go to state 46
    LBRACE          shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    CASE            shift and go to state 51
    LET             shift and go to state 53

    expression                     shift and go to state 69
    block                          shift and go to state 35
    conditional                    shift and go to state 36
    loop                           shift and go to state 37
    case                           shift and go to state 38
    dispatch                       shift and go to state 39
    let_expression                 shift and go to state 47
    dispatch_call                  shift and go to state 52

state 34

    (29) expression -> ISVOID . expression
    (19) expression -> . NOT expression
    (20) expression -> . expression LTHAN expression
    (21) expression -> . expression LETHAN expression
    (22) expression -> . expression EQUALS expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . MINUS expression
    (28) expression -> . LBRACKET expression RBRACKET
    (29) expression -> . ISVOID expression
    (30) expression -> . block
    (31) expression -> . conditional
    (32) expression -> . loop
    (33) expression -> . case
    (34) expression -> . dispatch
    (35) expression -> . BCOMPLEMENT expression
    (37) expression -> . ID
    (38) expression -> . INTEGER
    (39) expression -> . STRING
    (40) expression -> . TRUE
    (41) expression -> . FALSE
    (42) expression -> . NEW TYPE
    (43) expression -> . MINUS let_expression
    (44) expression -> . let_expression
    (63) expression -> . ID ASSIGN expression
    (36) block -> . LBRACE expression_list RBRACE
    (57) conditional -> . IF expression THEN expression ELSE expression FI
    (58) loop -> . WHILE expression LOOP expression POOL
    (59) case -> . CASE expression OF implications ESAC
    (45) dispatch -> . expression especific DOT dispatch_call
    (46) dispatch -> . dispatch_call
    (54) let_expression -> . LET declaration_list IN expression
    (49) dispatch_call -> . ID LBRACKET params_expression RBRACKET

    NOT             shift and go to state 31
    MINUS           shift and go to state 32
    LBRACKET        shift and go to state 33
    ISVOID          shift and go to state 34
    BCOMPLEMENT     shift and go to state 40
    ID              shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NEW             shift and go to state 46
    LBRACE          shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    CASE            shift and go to state 51
    LET             shift and go to state 53

    expression                     shift and go to state 70
    block                          shift and go to state 35
    conditional                    shift and go to state 36
    loop                           shift and go to state 37
    case                           shift and go to state 38
    dispatch                       shift and go to state 39
    let_expression                 shift and go to state 47
    dispatch_call                  shift and go to state 52

state 35

    (30) expression -> block .

    LTHAN           reduce using rule 30 (expression -> block .)
    LETHAN          reduce using rule 30 (expression -> block .)
    EQUALS          reduce using rule 30 (expression -> block .)
    PLUS            reduce using rule 30 (expression -> block .)
    MINUS           reduce using rule 30 (expression -> block .)
    TIMES           reduce using rule 30 (expression -> block .)
    DIVIDE          reduce using rule 30 (expression -> block .)
    DISP            reduce using rule 30 (expression -> block .)
    DOT             reduce using rule 30 (expression -> block .)
    SEMICOLON       reduce using rule 30 (expression -> block .)
    COMMA           reduce using rule 30 (expression -> block .)
    IN              reduce using rule 30 (expression -> block .)
    RBRACKET        reduce using rule 30 (expression -> block .)
    THEN            reduce using rule 30 (expression -> block .)
    LOOP            reduce using rule 30 (expression -> block .)
    OF              reduce using rule 30 (expression -> block .)
    ELSE            reduce using rule 30 (expression -> block .)
    POOL            reduce using rule 30 (expression -> block .)
    RBRACE          reduce using rule 30 (expression -> block .)
    FI              reduce using rule 30 (expression -> block .)


state 36

    (31) expression -> conditional .

    LTHAN           reduce using rule 31 (expression -> conditional .)
    LETHAN          reduce using rule 31 (expression -> conditional .)
    EQUALS          reduce using rule 31 (expression -> conditional .)
    PLUS            reduce using rule 31 (expression -> conditional .)
    MINUS           reduce using rule 31 (expression -> conditional .)
    TIMES           reduce using rule 31 (expression -> conditional .)
    DIVIDE          reduce using rule 31 (expression -> conditional .)
    DISP            reduce using rule 31 (expression -> conditional .)
    DOT             reduce using rule 31 (expression -> conditional .)
    SEMICOLON       reduce using rule 31 (expression -> conditional .)
    COMMA           reduce using rule 31 (expression -> conditional .)
    IN              reduce using rule 31 (expression -> conditional .)
    RBRACKET        reduce using rule 31 (expression -> conditional .)
    THEN            reduce using rule 31 (expression -> conditional .)
    LOOP            reduce using rule 31 (expression -> conditional .)
    OF              reduce using rule 31 (expression -> conditional .)
    ELSE            reduce using rule 31 (expression -> conditional .)
    POOL            reduce using rule 31 (expression -> conditional .)
    RBRACE          reduce using rule 31 (expression -> conditional .)
    FI              reduce using rule 31 (expression -> conditional .)


state 37

    (32) expression -> loop .

    LTHAN           reduce using rule 32 (expression -> loop .)
    LETHAN          reduce using rule 32 (expression -> loop .)
    EQUALS          reduce using rule 32 (expression -> loop .)
    PLUS            reduce using rule 32 (expression -> loop .)
    MINUS           reduce using rule 32 (expression -> loop .)
    TIMES           reduce using rule 32 (expression -> loop .)
    DIVIDE          reduce using rule 32 (expression -> loop .)
    DISP            reduce using rule 32 (expression -> loop .)
    DOT             reduce using rule 32 (expression -> loop .)
    SEMICOLON       reduce using rule 32 (expression -> loop .)
    COMMA           reduce using rule 32 (expression -> loop .)
    IN              reduce using rule 32 (expression -> loop .)
    RBRACKET        reduce using rule 32 (expression -> loop .)
    THEN            reduce using rule 32 (expression -> loop .)
    LOOP            reduce using rule 32 (expression -> loop .)
    OF              reduce using rule 32 (expression -> loop .)
    ELSE            reduce using rule 32 (expression -> loop .)
    POOL            reduce using rule 32 (expression -> loop .)
    RBRACE          reduce using rule 32 (expression -> loop .)
    FI              reduce using rule 32 (expression -> loop .)


state 38

    (33) expression -> case .

    LTHAN           reduce using rule 33 (expression -> case .)
    LETHAN          reduce using rule 33 (expression -> case .)
    EQUALS          reduce using rule 33 (expression -> case .)
    PLUS            reduce using rule 33 (expression -> case .)
    MINUS           reduce using rule 33 (expression -> case .)
    TIMES           reduce using rule 33 (expression -> case .)
    DIVIDE          reduce using rule 33 (expression -> case .)
    DISP            reduce using rule 33 (expression -> case .)
    DOT             reduce using rule 33 (expression -> case .)
    SEMICOLON       reduce using rule 33 (expression -> case .)
    COMMA           reduce using rule 33 (expression -> case .)
    IN              reduce using rule 33 (expression -> case .)
    RBRACKET        reduce using rule 33 (expression -> case .)
    THEN            reduce using rule 33 (expression -> case .)
    LOOP            reduce using rule 33 (expression -> case .)
    OF              reduce using rule 33 (expression -> case .)
    ELSE            reduce using rule 33 (expression -> case .)
    POOL            reduce using rule 33 (expression -> case .)
    RBRACE          reduce using rule 33 (expression -> case .)
    FI              reduce using rule 33 (expression -> case .)


state 39

    (34) expression -> dispatch .

    LTHAN           reduce using rule 34 (expression -> dispatch .)
    LETHAN          reduce using rule 34 (expression -> dispatch .)
    EQUALS          reduce using rule 34 (expression -> dispatch .)
    PLUS            reduce using rule 34 (expression -> dispatch .)
    MINUS           reduce using rule 34 (expression -> dispatch .)
    TIMES           reduce using rule 34 (expression -> dispatch .)
    DIVIDE          reduce using rule 34 (expression -> dispatch .)
    DISP            reduce using rule 34 (expression -> dispatch .)
    DOT             reduce using rule 34 (expression -> dispatch .)
    SEMICOLON       reduce using rule 34 (expression -> dispatch .)
    COMMA           reduce using rule 34 (expression -> dispatch .)
    IN              reduce using rule 34 (expression -> dispatch .)
    RBRACKET        reduce using rule 34 (expression -> dispatch .)
    THEN            reduce using rule 34 (expression -> dispatch .)
    LOOP            reduce using rule 34 (expression -> dispatch .)
    OF              reduce using rule 34 (expression -> dispatch .)
    ELSE            reduce using rule 34 (expression -> dispatch .)
    POOL            reduce using rule 34 (expression -> dispatch .)
    RBRACE          reduce using rule 34 (expression -> dispatch .)
    FI              reduce using rule 34 (expression -> dispatch .)


state 40

    (35) expression -> BCOMPLEMENT . expression
    (19) expression -> . NOT expression
    (20) expression -> . expression LTHAN expression
    (21) expression -> . expression LETHAN expression
    (22) expression -> . expression EQUALS expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . MINUS expression
    (28) expression -> . LBRACKET expression RBRACKET
    (29) expression -> . ISVOID expression
    (30) expression -> . block
    (31) expression -> . conditional
    (32) expression -> . loop
    (33) expression -> . case
    (34) expression -> . dispatch
    (35) expression -> . BCOMPLEMENT expression
    (37) expression -> . ID
    (38) expression -> . INTEGER
    (39) expression -> . STRING
    (40) expression -> . TRUE
    (41) expression -> . FALSE
    (42) expression -> . NEW TYPE
    (43) expression -> . MINUS let_expression
    (44) expression -> . let_expression
    (63) expression -> . ID ASSIGN expression
    (36) block -> . LBRACE expression_list RBRACE
    (57) conditional -> . IF expression THEN expression ELSE expression FI
    (58) loop -> . WHILE expression LOOP expression POOL
    (59) case -> . CASE expression OF implications ESAC
    (45) dispatch -> . expression especific DOT dispatch_call
    (46) dispatch -> . dispatch_call
    (54) let_expression -> . LET declaration_list IN expression
    (49) dispatch_call -> . ID LBRACKET params_expression RBRACKET

    NOT             shift and go to state 31
    MINUS           shift and go to state 32
    LBRACKET        shift and go to state 33
    ISVOID          shift and go to state 34
    BCOMPLEMENT     shift and go to state 40
    ID              shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NEW             shift and go to state 46
    LBRACE          shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    CASE            shift and go to state 51
    LET             shift and go to state 53

    expression                     shift and go to state 71
    block                          shift and go to state 35
    conditional                    shift and go to state 36
    loop                           shift and go to state 37
    case                           shift and go to state 38
    dispatch                       shift and go to state 39
    let_expression                 shift and go to state 47
    dispatch_call                  shift and go to state 52

state 41

    (37) expression -> ID .
    (63) expression -> ID . ASSIGN expression
    (49) dispatch_call -> ID . LBRACKET params_expression RBRACKET

    LTHAN           reduce using rule 37 (expression -> ID .)
    LETHAN          reduce using rule 37 (expression -> ID .)
    EQUALS          reduce using rule 37 (expression -> ID .)
    PLUS            reduce using rule 37 (expression -> ID .)
    MINUS           reduce using rule 37 (expression -> ID .)
    TIMES           reduce using rule 37 (expression -> ID .)
    DIVIDE          reduce using rule 37 (expression -> ID .)
    DISP            reduce using rule 37 (expression -> ID .)
    DOT             reduce using rule 37 (expression -> ID .)
    SEMICOLON       reduce using rule 37 (expression -> ID .)
    COMMA           reduce using rule 37 (expression -> ID .)
    IN              reduce using rule 37 (expression -> ID .)
    RBRACKET        reduce using rule 37 (expression -> ID .)
    THEN            reduce using rule 37 (expression -> ID .)
    LOOP            reduce using rule 37 (expression -> ID .)
    OF              reduce using rule 37 (expression -> ID .)
    ELSE            reduce using rule 37 (expression -> ID .)
    POOL            reduce using rule 37 (expression -> ID .)
    RBRACE          reduce using rule 37 (expression -> ID .)
    FI              reduce using rule 37 (expression -> ID .)
    ASSIGN          shift and go to state 72
    LBRACKET        shift and go to state 73


state 42

    (38) expression -> INTEGER .

    LTHAN           reduce using rule 38 (expression -> INTEGER .)
    LETHAN          reduce using rule 38 (expression -> INTEGER .)
    EQUALS          reduce using rule 38 (expression -> INTEGER .)
    PLUS            reduce using rule 38 (expression -> INTEGER .)
    MINUS           reduce using rule 38 (expression -> INTEGER .)
    TIMES           reduce using rule 38 (expression -> INTEGER .)
    DIVIDE          reduce using rule 38 (expression -> INTEGER .)
    DISP            reduce using rule 38 (expression -> INTEGER .)
    DOT             reduce using rule 38 (expression -> INTEGER .)
    SEMICOLON       reduce using rule 38 (expression -> INTEGER .)
    COMMA           reduce using rule 38 (expression -> INTEGER .)
    IN              reduce using rule 38 (expression -> INTEGER .)
    RBRACKET        reduce using rule 38 (expression -> INTEGER .)
    THEN            reduce using rule 38 (expression -> INTEGER .)
    LOOP            reduce using rule 38 (expression -> INTEGER .)
    OF              reduce using rule 38 (expression -> INTEGER .)
    ELSE            reduce using rule 38 (expression -> INTEGER .)
    POOL            reduce using rule 38 (expression -> INTEGER .)
    RBRACE          reduce using rule 38 (expression -> INTEGER .)
    FI              reduce using rule 38 (expression -> INTEGER .)


state 43

    (39) expression -> STRING .

    LTHAN           reduce using rule 39 (expression -> STRING .)
    LETHAN          reduce using rule 39 (expression -> STRING .)
    EQUALS          reduce using rule 39 (expression -> STRING .)
    PLUS            reduce using rule 39 (expression -> STRING .)
    MINUS           reduce using rule 39 (expression -> STRING .)
    TIMES           reduce using rule 39 (expression -> STRING .)
    DIVIDE          reduce using rule 39 (expression -> STRING .)
    DISP            reduce using rule 39 (expression -> STRING .)
    DOT             reduce using rule 39 (expression -> STRING .)
    SEMICOLON       reduce using rule 39 (expression -> STRING .)
    COMMA           reduce using rule 39 (expression -> STRING .)
    IN              reduce using rule 39 (expression -> STRING .)
    RBRACKET        reduce using rule 39 (expression -> STRING .)
    THEN            reduce using rule 39 (expression -> STRING .)
    LOOP            reduce using rule 39 (expression -> STRING .)
    OF              reduce using rule 39 (expression -> STRING .)
    ELSE            reduce using rule 39 (expression -> STRING .)
    POOL            reduce using rule 39 (expression -> STRING .)
    RBRACE          reduce using rule 39 (expression -> STRING .)
    FI              reduce using rule 39 (expression -> STRING .)


state 44

    (40) expression -> TRUE .

    LTHAN           reduce using rule 40 (expression -> TRUE .)
    LETHAN          reduce using rule 40 (expression -> TRUE .)
    EQUALS          reduce using rule 40 (expression -> TRUE .)
    PLUS            reduce using rule 40 (expression -> TRUE .)
    MINUS           reduce using rule 40 (expression -> TRUE .)
    TIMES           reduce using rule 40 (expression -> TRUE .)
    DIVIDE          reduce using rule 40 (expression -> TRUE .)
    DISP            reduce using rule 40 (expression -> TRUE .)
    DOT             reduce using rule 40 (expression -> TRUE .)
    SEMICOLON       reduce using rule 40 (expression -> TRUE .)
    COMMA           reduce using rule 40 (expression -> TRUE .)
    IN              reduce using rule 40 (expression -> TRUE .)
    RBRACKET        reduce using rule 40 (expression -> TRUE .)
    THEN            reduce using rule 40 (expression -> TRUE .)
    LOOP            reduce using rule 40 (expression -> TRUE .)
    OF              reduce using rule 40 (expression -> TRUE .)
    ELSE            reduce using rule 40 (expression -> TRUE .)
    POOL            reduce using rule 40 (expression -> TRUE .)
    RBRACE          reduce using rule 40 (expression -> TRUE .)
    FI              reduce using rule 40 (expression -> TRUE .)


state 45

    (41) expression -> FALSE .

    LTHAN           reduce using rule 41 (expression -> FALSE .)
    LETHAN          reduce using rule 41 (expression -> FALSE .)
    EQUALS          reduce using rule 41 (expression -> FALSE .)
    PLUS            reduce using rule 41 (expression -> FALSE .)
    MINUS           reduce using rule 41 (expression -> FALSE .)
    TIMES           reduce using rule 41 (expression -> FALSE .)
    DIVIDE          reduce using rule 41 (expression -> FALSE .)
    DISP            reduce using rule 41 (expression -> FALSE .)
    DOT             reduce using rule 41 (expression -> FALSE .)
    SEMICOLON       reduce using rule 41 (expression -> FALSE .)
    COMMA           reduce using rule 41 (expression -> FALSE .)
    IN              reduce using rule 41 (expression -> FALSE .)
    RBRACKET        reduce using rule 41 (expression -> FALSE .)
    THEN            reduce using rule 41 (expression -> FALSE .)
    LOOP            reduce using rule 41 (expression -> FALSE .)
    OF              reduce using rule 41 (expression -> FALSE .)
    ELSE            reduce using rule 41 (expression -> FALSE .)
    POOL            reduce using rule 41 (expression -> FALSE .)
    RBRACE          reduce using rule 41 (expression -> FALSE .)
    FI              reduce using rule 41 (expression -> FALSE .)


state 46

    (42) expression -> NEW . TYPE

    TYPE            shift and go to state 74


state 47

    (44) expression -> let_expression .

    LTHAN           reduce using rule 44 (expression -> let_expression .)
    LETHAN          reduce using rule 44 (expression -> let_expression .)
    EQUALS          reduce using rule 44 (expression -> let_expression .)
    PLUS            reduce using rule 44 (expression -> let_expression .)
    MINUS           reduce using rule 44 (expression -> let_expression .)
    TIMES           reduce using rule 44 (expression -> let_expression .)
    DIVIDE          reduce using rule 44 (expression -> let_expression .)
    DISP            reduce using rule 44 (expression -> let_expression .)
    DOT             reduce using rule 44 (expression -> let_expression .)
    SEMICOLON       reduce using rule 44 (expression -> let_expression .)
    COMMA           reduce using rule 44 (expression -> let_expression .)
    IN              reduce using rule 44 (expression -> let_expression .)
    RBRACKET        reduce using rule 44 (expression -> let_expression .)
    THEN            reduce using rule 44 (expression -> let_expression .)
    LOOP            reduce using rule 44 (expression -> let_expression .)
    OF              reduce using rule 44 (expression -> let_expression .)
    ELSE            reduce using rule 44 (expression -> let_expression .)
    POOL            reduce using rule 44 (expression -> let_expression .)
    RBRACE          reduce using rule 44 (expression -> let_expression .)
    FI              reduce using rule 44 (expression -> let_expression .)


state 48

    (36) block -> LBRACE . expression_list RBRACE
    (17) expression_list -> . expression SEMICOLON expression_list
    (18) expression_list -> . expression SEMICOLON
    (19) expression -> . NOT expression
    (20) expression -> . expression LTHAN expression
    (21) expression -> . expression LETHAN expression
    (22) expression -> . expression EQUALS expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . MINUS expression
    (28) expression -> . LBRACKET expression RBRACKET
    (29) expression -> . ISVOID expression
    (30) expression -> . block
    (31) expression -> . conditional
    (32) expression -> . loop
    (33) expression -> . case
    (34) expression -> . dispatch
    (35) expression -> . BCOMPLEMENT expression
    (37) expression -> . ID
    (38) expression -> . INTEGER
    (39) expression -> . STRING
    (40) expression -> . TRUE
    (41) expression -> . FALSE
    (42) expression -> . NEW TYPE
    (43) expression -> . MINUS let_expression
    (44) expression -> . let_expression
    (63) expression -> . ID ASSIGN expression
    (36) block -> . LBRACE expression_list RBRACE
    (57) conditional -> . IF expression THEN expression ELSE expression FI
    (58) loop -> . WHILE expression LOOP expression POOL
    (59) case -> . CASE expression OF implications ESAC
    (45) dispatch -> . expression especific DOT dispatch_call
    (46) dispatch -> . dispatch_call
    (54) let_expression -> . LET declaration_list IN expression
    (49) dispatch_call -> . ID LBRACKET params_expression RBRACKET

    NOT             shift and go to state 31
    MINUS           shift and go to state 32
    LBRACKET        shift and go to state 33
    ISVOID          shift and go to state 34
    BCOMPLEMENT     shift and go to state 40
    ID              shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NEW             shift and go to state 46
    LBRACE          shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    CASE            shift and go to state 51
    LET             shift and go to state 53

    expression_list                shift and go to state 75
    expression                     shift and go to state 76
    block                          shift and go to state 35
    conditional                    shift and go to state 36
    loop                           shift and go to state 37
    case                           shift and go to state 38
    dispatch                       shift and go to state 39
    let_expression                 shift and go to state 47
    dispatch_call                  shift and go to state 52

state 49

    (57) conditional -> IF . expression THEN expression ELSE expression FI
    (19) expression -> . NOT expression
    (20) expression -> . expression LTHAN expression
    (21) expression -> . expression LETHAN expression
    (22) expression -> . expression EQUALS expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . MINUS expression
    (28) expression -> . LBRACKET expression RBRACKET
    (29) expression -> . ISVOID expression
    (30) expression -> . block
    (31) expression -> . conditional
    (32) expression -> . loop
    (33) expression -> . case
    (34) expression -> . dispatch
    (35) expression -> . BCOMPLEMENT expression
    (37) expression -> . ID
    (38) expression -> . INTEGER
    (39) expression -> . STRING
    (40) expression -> . TRUE
    (41) expression -> . FALSE
    (42) expression -> . NEW TYPE
    (43) expression -> . MINUS let_expression
    (44) expression -> . let_expression
    (63) expression -> . ID ASSIGN expression
    (36) block -> . LBRACE expression_list RBRACE
    (57) conditional -> . IF expression THEN expression ELSE expression FI
    (58) loop -> . WHILE expression LOOP expression POOL
    (59) case -> . CASE expression OF implications ESAC
    (45) dispatch -> . expression especific DOT dispatch_call
    (46) dispatch -> . dispatch_call
    (54) let_expression -> . LET declaration_list IN expression
    (49) dispatch_call -> . ID LBRACKET params_expression RBRACKET

    NOT             shift and go to state 31
    MINUS           shift and go to state 32
    LBRACKET        shift and go to state 33
    ISVOID          shift and go to state 34
    BCOMPLEMENT     shift and go to state 40
    ID              shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NEW             shift and go to state 46
    LBRACE          shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    CASE            shift and go to state 51
    LET             shift and go to state 53

    expression                     shift and go to state 77
    block                          shift and go to state 35
    conditional                    shift and go to state 36
    loop                           shift and go to state 37
    case                           shift and go to state 38
    dispatch                       shift and go to state 39
    let_expression                 shift and go to state 47
    dispatch_call                  shift and go to state 52

state 50

    (58) loop -> WHILE . expression LOOP expression POOL
    (19) expression -> . NOT expression
    (20) expression -> . expression LTHAN expression
    (21) expression -> . expression LETHAN expression
    (22) expression -> . expression EQUALS expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . MINUS expression
    (28) expression -> . LBRACKET expression RBRACKET
    (29) expression -> . ISVOID expression
    (30) expression -> . block
    (31) expression -> . conditional
    (32) expression -> . loop
    (33) expression -> . case
    (34) expression -> . dispatch
    (35) expression -> . BCOMPLEMENT expression
    (37) expression -> . ID
    (38) expression -> . INTEGER
    (39) expression -> . STRING
    (40) expression -> . TRUE
    (41) expression -> . FALSE
    (42) expression -> . NEW TYPE
    (43) expression -> . MINUS let_expression
    (44) expression -> . let_expression
    (63) expression -> . ID ASSIGN expression
    (36) block -> . LBRACE expression_list RBRACE
    (57) conditional -> . IF expression THEN expression ELSE expression FI
    (58) loop -> . WHILE expression LOOP expression POOL
    (59) case -> . CASE expression OF implications ESAC
    (45) dispatch -> . expression especific DOT dispatch_call
    (46) dispatch -> . dispatch_call
    (54) let_expression -> . LET declaration_list IN expression
    (49) dispatch_call -> . ID LBRACKET params_expression RBRACKET

    NOT             shift and go to state 31
    MINUS           shift and go to state 32
    LBRACKET        shift and go to state 33
    ISVOID          shift and go to state 34
    BCOMPLEMENT     shift and go to state 40
    ID              shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NEW             shift and go to state 46
    LBRACE          shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    CASE            shift and go to state 51
    LET             shift and go to state 53

    expression                     shift and go to state 78
    block                          shift and go to state 35
    conditional                    shift and go to state 36
    loop                           shift and go to state 37
    case                           shift and go to state 38
    dispatch                       shift and go to state 39
    let_expression                 shift and go to state 47
    dispatch_call                  shift and go to state 52

state 51

    (59) case -> CASE . expression OF implications ESAC
    (19) expression -> . NOT expression
    (20) expression -> . expression LTHAN expression
    (21) expression -> . expression LETHAN expression
    (22) expression -> . expression EQUALS expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . MINUS expression
    (28) expression -> . LBRACKET expression RBRACKET
    (29) expression -> . ISVOID expression
    (30) expression -> . block
    (31) expression -> . conditional
    (32) expression -> . loop
    (33) expression -> . case
    (34) expression -> . dispatch
    (35) expression -> . BCOMPLEMENT expression
    (37) expression -> . ID
    (38) expression -> . INTEGER
    (39) expression -> . STRING
    (40) expression -> . TRUE
    (41) expression -> . FALSE
    (42) expression -> . NEW TYPE
    (43) expression -> . MINUS let_expression
    (44) expression -> . let_expression
    (63) expression -> . ID ASSIGN expression
    (36) block -> . LBRACE expression_list RBRACE
    (57) conditional -> . IF expression THEN expression ELSE expression FI
    (58) loop -> . WHILE expression LOOP expression POOL
    (59) case -> . CASE expression OF implications ESAC
    (45) dispatch -> . expression especific DOT dispatch_call
    (46) dispatch -> . dispatch_call
    (54) let_expression -> . LET declaration_list IN expression
    (49) dispatch_call -> . ID LBRACKET params_expression RBRACKET

    NOT             shift and go to state 31
    MINUS           shift and go to state 32
    LBRACKET        shift and go to state 33
    ISVOID          shift and go to state 34
    BCOMPLEMENT     shift and go to state 40
    ID              shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NEW             shift and go to state 46
    LBRACE          shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    CASE            shift and go to state 51
    LET             shift and go to state 53

    expression                     shift and go to state 79
    block                          shift and go to state 35
    conditional                    shift and go to state 36
    loop                           shift and go to state 37
    case                           shift and go to state 38
    dispatch                       shift and go to state 39
    let_expression                 shift and go to state 47
    dispatch_call                  shift and go to state 52

state 52

    (46) dispatch -> dispatch_call .

    LTHAN           reduce using rule 46 (dispatch -> dispatch_call .)
    LETHAN          reduce using rule 46 (dispatch -> dispatch_call .)
    EQUALS          reduce using rule 46 (dispatch -> dispatch_call .)
    PLUS            reduce using rule 46 (dispatch -> dispatch_call .)
    MINUS           reduce using rule 46 (dispatch -> dispatch_call .)
    TIMES           reduce using rule 46 (dispatch -> dispatch_call .)
    DIVIDE          reduce using rule 46 (dispatch -> dispatch_call .)
    DISP            reduce using rule 46 (dispatch -> dispatch_call .)
    DOT             reduce using rule 46 (dispatch -> dispatch_call .)
    SEMICOLON       reduce using rule 46 (dispatch -> dispatch_call .)
    COMMA           reduce using rule 46 (dispatch -> dispatch_call .)
    IN              reduce using rule 46 (dispatch -> dispatch_call .)
    RBRACKET        reduce using rule 46 (dispatch -> dispatch_call .)
    THEN            reduce using rule 46 (dispatch -> dispatch_call .)
    LOOP            reduce using rule 46 (dispatch -> dispatch_call .)
    OF              reduce using rule 46 (dispatch -> dispatch_call .)
    ELSE            reduce using rule 46 (dispatch -> dispatch_call .)
    POOL            reduce using rule 46 (dispatch -> dispatch_call .)
    RBRACE          reduce using rule 46 (dispatch -> dispatch_call .)
    FI              reduce using rule 46 (dispatch -> dispatch_call .)


state 53

    (54) let_expression -> LET . declaration_list IN expression
    (55) declaration_list -> . attribute COMMA declaration_list
    (56) declaration_list -> . attribute
    (10) attribute -> . id_type
    (11) attribute -> . id_type ASSIGN expression
    (12) id_type -> . ID TDOTS TYPE

    ID              shift and go to state 25

    declaration_list               shift and go to state 80
    attribute                      shift and go to state 81
    id_type                        shift and go to state 18

state 54

    (13) method_declaration -> ID LBRACKET formals RBRACKET . TDOTS TYPE LBRACE expression RBRACE

    TDOTS           shift and go to state 82


state 55

    (14) formals -> id_type COMMA . formals
    (14) formals -> . id_type COMMA formals
    (15) formals -> . id_type
    (16) formals -> . empty
    (12) id_type -> . ID TDOTS TYPE
    (53) empty -> .

    ID              shift and go to state 25
    RBRACKET        reduce using rule 53 (empty -> .)

    id_type                        shift and go to state 27
    formals                        shift and go to state 83
    empty                          shift and go to state 28

state 56

    (20) expression -> expression LTHAN . expression
    (19) expression -> . NOT expression
    (20) expression -> . expression LTHAN expression
    (21) expression -> . expression LETHAN expression
    (22) expression -> . expression EQUALS expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . MINUS expression
    (28) expression -> . LBRACKET expression RBRACKET
    (29) expression -> . ISVOID expression
    (30) expression -> . block
    (31) expression -> . conditional
    (32) expression -> . loop
    (33) expression -> . case
    (34) expression -> . dispatch
    (35) expression -> . BCOMPLEMENT expression
    (37) expression -> . ID
    (38) expression -> . INTEGER
    (39) expression -> . STRING
    (40) expression -> . TRUE
    (41) expression -> . FALSE
    (42) expression -> . NEW TYPE
    (43) expression -> . MINUS let_expression
    (44) expression -> . let_expression
    (63) expression -> . ID ASSIGN expression
    (36) block -> . LBRACE expression_list RBRACE
    (57) conditional -> . IF expression THEN expression ELSE expression FI
    (58) loop -> . WHILE expression LOOP expression POOL
    (59) case -> . CASE expression OF implications ESAC
    (45) dispatch -> . expression especific DOT dispatch_call
    (46) dispatch -> . dispatch_call
    (54) let_expression -> . LET declaration_list IN expression
    (49) dispatch_call -> . ID LBRACKET params_expression RBRACKET

    NOT             shift and go to state 31
    MINUS           shift and go to state 32
    LBRACKET        shift and go to state 33
    ISVOID          shift and go to state 34
    BCOMPLEMENT     shift and go to state 40
    ID              shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NEW             shift and go to state 46
    LBRACE          shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    CASE            shift and go to state 51
    LET             shift and go to state 53

    expression                     shift and go to state 84
    block                          shift and go to state 35
    conditional                    shift and go to state 36
    loop                           shift and go to state 37
    case                           shift and go to state 38
    dispatch                       shift and go to state 39
    let_expression                 shift and go to state 47
    dispatch_call                  shift and go to state 52

state 57

    (21) expression -> expression LETHAN . expression
    (19) expression -> . NOT expression
    (20) expression -> . expression LTHAN expression
    (21) expression -> . expression LETHAN expression
    (22) expression -> . expression EQUALS expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . MINUS expression
    (28) expression -> . LBRACKET expression RBRACKET
    (29) expression -> . ISVOID expression
    (30) expression -> . block
    (31) expression -> . conditional
    (32) expression -> . loop
    (33) expression -> . case
    (34) expression -> . dispatch
    (35) expression -> . BCOMPLEMENT expression
    (37) expression -> . ID
    (38) expression -> . INTEGER
    (39) expression -> . STRING
    (40) expression -> . TRUE
    (41) expression -> . FALSE
    (42) expression -> . NEW TYPE
    (43) expression -> . MINUS let_expression
    (44) expression -> . let_expression
    (63) expression -> . ID ASSIGN expression
    (36) block -> . LBRACE expression_list RBRACE
    (57) conditional -> . IF expression THEN expression ELSE expression FI
    (58) loop -> . WHILE expression LOOP expression POOL
    (59) case -> . CASE expression OF implications ESAC
    (45) dispatch -> . expression especific DOT dispatch_call
    (46) dispatch -> . dispatch_call
    (54) let_expression -> . LET declaration_list IN expression
    (49) dispatch_call -> . ID LBRACKET params_expression RBRACKET

    NOT             shift and go to state 31
    MINUS           shift and go to state 32
    LBRACKET        shift and go to state 33
    ISVOID          shift and go to state 34
    BCOMPLEMENT     shift and go to state 40
    ID              shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NEW             shift and go to state 46
    LBRACE          shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    CASE            shift and go to state 51
    LET             shift and go to state 53

    expression                     shift and go to state 85
    block                          shift and go to state 35
    conditional                    shift and go to state 36
    loop                           shift and go to state 37
    case                           shift and go to state 38
    dispatch                       shift and go to state 39
    let_expression                 shift and go to state 47
    dispatch_call                  shift and go to state 52

state 58

    (22) expression -> expression EQUALS . expression
    (19) expression -> . NOT expression
    (20) expression -> . expression LTHAN expression
    (21) expression -> . expression LETHAN expression
    (22) expression -> . expression EQUALS expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . MINUS expression
    (28) expression -> . LBRACKET expression RBRACKET
    (29) expression -> . ISVOID expression
    (30) expression -> . block
    (31) expression -> . conditional
    (32) expression -> . loop
    (33) expression -> . case
    (34) expression -> . dispatch
    (35) expression -> . BCOMPLEMENT expression
    (37) expression -> . ID
    (38) expression -> . INTEGER
    (39) expression -> . STRING
    (40) expression -> . TRUE
    (41) expression -> . FALSE
    (42) expression -> . NEW TYPE
    (43) expression -> . MINUS let_expression
    (44) expression -> . let_expression
    (63) expression -> . ID ASSIGN expression
    (36) block -> . LBRACE expression_list RBRACE
    (57) conditional -> . IF expression THEN expression ELSE expression FI
    (58) loop -> . WHILE expression LOOP expression POOL
    (59) case -> . CASE expression OF implications ESAC
    (45) dispatch -> . expression especific DOT dispatch_call
    (46) dispatch -> . dispatch_call
    (54) let_expression -> . LET declaration_list IN expression
    (49) dispatch_call -> . ID LBRACKET params_expression RBRACKET

    NOT             shift and go to state 31
    MINUS           shift and go to state 32
    LBRACKET        shift and go to state 33
    ISVOID          shift and go to state 34
    BCOMPLEMENT     shift and go to state 40
    ID              shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NEW             shift and go to state 46
    LBRACE          shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    CASE            shift and go to state 51
    LET             shift and go to state 53

    expression                     shift and go to state 86
    block                          shift and go to state 35
    conditional                    shift and go to state 36
    loop                           shift and go to state 37
    case                           shift and go to state 38
    dispatch                       shift and go to state 39
    let_expression                 shift and go to state 47
    dispatch_call                  shift and go to state 52

state 59

    (23) expression -> expression PLUS . expression
    (19) expression -> . NOT expression
    (20) expression -> . expression LTHAN expression
    (21) expression -> . expression LETHAN expression
    (22) expression -> . expression EQUALS expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . MINUS expression
    (28) expression -> . LBRACKET expression RBRACKET
    (29) expression -> . ISVOID expression
    (30) expression -> . block
    (31) expression -> . conditional
    (32) expression -> . loop
    (33) expression -> . case
    (34) expression -> . dispatch
    (35) expression -> . BCOMPLEMENT expression
    (37) expression -> . ID
    (38) expression -> . INTEGER
    (39) expression -> . STRING
    (40) expression -> . TRUE
    (41) expression -> . FALSE
    (42) expression -> . NEW TYPE
    (43) expression -> . MINUS let_expression
    (44) expression -> . let_expression
    (63) expression -> . ID ASSIGN expression
    (36) block -> . LBRACE expression_list RBRACE
    (57) conditional -> . IF expression THEN expression ELSE expression FI
    (58) loop -> . WHILE expression LOOP expression POOL
    (59) case -> . CASE expression OF implications ESAC
    (45) dispatch -> . expression especific DOT dispatch_call
    (46) dispatch -> . dispatch_call
    (54) let_expression -> . LET declaration_list IN expression
    (49) dispatch_call -> . ID LBRACKET params_expression RBRACKET

    NOT             shift and go to state 31
    MINUS           shift and go to state 32
    LBRACKET        shift and go to state 33
    ISVOID          shift and go to state 34
    BCOMPLEMENT     shift and go to state 40
    ID              shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NEW             shift and go to state 46
    LBRACE          shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    CASE            shift and go to state 51
    LET             shift and go to state 53

    expression                     shift and go to state 87
    block                          shift and go to state 35
    conditional                    shift and go to state 36
    loop                           shift and go to state 37
    case                           shift and go to state 38
    dispatch                       shift and go to state 39
    let_expression                 shift and go to state 47
    dispatch_call                  shift and go to state 52

state 60

    (24) expression -> expression MINUS . expression
    (19) expression -> . NOT expression
    (20) expression -> . expression LTHAN expression
    (21) expression -> . expression LETHAN expression
    (22) expression -> . expression EQUALS expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . MINUS expression
    (28) expression -> . LBRACKET expression RBRACKET
    (29) expression -> . ISVOID expression
    (30) expression -> . block
    (31) expression -> . conditional
    (32) expression -> . loop
    (33) expression -> . case
    (34) expression -> . dispatch
    (35) expression -> . BCOMPLEMENT expression
    (37) expression -> . ID
    (38) expression -> . INTEGER
    (39) expression -> . STRING
    (40) expression -> . TRUE
    (41) expression -> . FALSE
    (42) expression -> . NEW TYPE
    (43) expression -> . MINUS let_expression
    (44) expression -> . let_expression
    (63) expression -> . ID ASSIGN expression
    (36) block -> . LBRACE expression_list RBRACE
    (57) conditional -> . IF expression THEN expression ELSE expression FI
    (58) loop -> . WHILE expression LOOP expression POOL
    (59) case -> . CASE expression OF implications ESAC
    (45) dispatch -> . expression especific DOT dispatch_call
    (46) dispatch -> . dispatch_call
    (54) let_expression -> . LET declaration_list IN expression
    (49) dispatch_call -> . ID LBRACKET params_expression RBRACKET

    NOT             shift and go to state 31
    MINUS           shift and go to state 32
    LBRACKET        shift and go to state 33
    ISVOID          shift and go to state 34
    BCOMPLEMENT     shift and go to state 40
    ID              shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NEW             shift and go to state 46
    LBRACE          shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    CASE            shift and go to state 51
    LET             shift and go to state 53

    expression                     shift and go to state 88
    block                          shift and go to state 35
    conditional                    shift and go to state 36
    loop                           shift and go to state 37
    case                           shift and go to state 38
    dispatch                       shift and go to state 39
    let_expression                 shift and go to state 47
    dispatch_call                  shift and go to state 52

state 61

    (25) expression -> expression TIMES . expression
    (19) expression -> . NOT expression
    (20) expression -> . expression LTHAN expression
    (21) expression -> . expression LETHAN expression
    (22) expression -> . expression EQUALS expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . MINUS expression
    (28) expression -> . LBRACKET expression RBRACKET
    (29) expression -> . ISVOID expression
    (30) expression -> . block
    (31) expression -> . conditional
    (32) expression -> . loop
    (33) expression -> . case
    (34) expression -> . dispatch
    (35) expression -> . BCOMPLEMENT expression
    (37) expression -> . ID
    (38) expression -> . INTEGER
    (39) expression -> . STRING
    (40) expression -> . TRUE
    (41) expression -> . FALSE
    (42) expression -> . NEW TYPE
    (43) expression -> . MINUS let_expression
    (44) expression -> . let_expression
    (63) expression -> . ID ASSIGN expression
    (36) block -> . LBRACE expression_list RBRACE
    (57) conditional -> . IF expression THEN expression ELSE expression FI
    (58) loop -> . WHILE expression LOOP expression POOL
    (59) case -> . CASE expression OF implications ESAC
    (45) dispatch -> . expression especific DOT dispatch_call
    (46) dispatch -> . dispatch_call
    (54) let_expression -> . LET declaration_list IN expression
    (49) dispatch_call -> . ID LBRACKET params_expression RBRACKET

    NOT             shift and go to state 31
    MINUS           shift and go to state 32
    LBRACKET        shift and go to state 33
    ISVOID          shift and go to state 34
    BCOMPLEMENT     shift and go to state 40
    ID              shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NEW             shift and go to state 46
    LBRACE          shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    CASE            shift and go to state 51
    LET             shift and go to state 53

    expression                     shift and go to state 89
    block                          shift and go to state 35
    conditional                    shift and go to state 36
    loop                           shift and go to state 37
    case                           shift and go to state 38
    dispatch                       shift and go to state 39
    let_expression                 shift and go to state 47
    dispatch_call                  shift and go to state 52

state 62

    (26) expression -> expression DIVIDE . expression
    (19) expression -> . NOT expression
    (20) expression -> . expression LTHAN expression
    (21) expression -> . expression LETHAN expression
    (22) expression -> . expression EQUALS expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . MINUS expression
    (28) expression -> . LBRACKET expression RBRACKET
    (29) expression -> . ISVOID expression
    (30) expression -> . block
    (31) expression -> . conditional
    (32) expression -> . loop
    (33) expression -> . case
    (34) expression -> . dispatch
    (35) expression -> . BCOMPLEMENT expression
    (37) expression -> . ID
    (38) expression -> . INTEGER
    (39) expression -> . STRING
    (40) expression -> . TRUE
    (41) expression -> . FALSE
    (42) expression -> . NEW TYPE
    (43) expression -> . MINUS let_expression
    (44) expression -> . let_expression
    (63) expression -> . ID ASSIGN expression
    (36) block -> . LBRACE expression_list RBRACE
    (57) conditional -> . IF expression THEN expression ELSE expression FI
    (58) loop -> . WHILE expression LOOP expression POOL
    (59) case -> . CASE expression OF implications ESAC
    (45) dispatch -> . expression especific DOT dispatch_call
    (46) dispatch -> . dispatch_call
    (54) let_expression -> . LET declaration_list IN expression
    (49) dispatch_call -> . ID LBRACKET params_expression RBRACKET

    NOT             shift and go to state 31
    MINUS           shift and go to state 32
    LBRACKET        shift and go to state 33
    ISVOID          shift and go to state 34
    BCOMPLEMENT     shift and go to state 40
    ID              shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NEW             shift and go to state 46
    LBRACE          shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    CASE            shift and go to state 51
    LET             shift and go to state 53

    expression                     shift and go to state 90
    block                          shift and go to state 35
    conditional                    shift and go to state 36
    loop                           shift and go to state 37
    case                           shift and go to state 38
    dispatch                       shift and go to state 39
    let_expression                 shift and go to state 47
    dispatch_call                  shift and go to state 52

state 63

    (45) dispatch -> expression especific . DOT dispatch_call

    DOT             shift and go to state 91


state 64

    (47) especific -> DISP . TYPE

    TYPE            shift and go to state 92


state 65

    (48) especific -> empty .

    DOT             reduce using rule 48 (especific -> empty .)


state 66

    (19) expression -> NOT expression .
    (20) expression -> expression . LTHAN expression
    (21) expression -> expression . LETHAN expression
    (22) expression -> expression . EQUALS expression
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (45) dispatch -> expression . especific DOT dispatch_call
    (47) especific -> . DISP TYPE
    (48) especific -> . empty
    (53) empty -> .

  ! reduce/reduce conflict for DOT resolved using rule 19 (expression -> NOT expression .)
    DOT             reduce using rule 19 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 19 (expression -> NOT expression .)
    COMMA           reduce using rule 19 (expression -> NOT expression .)
    IN              reduce using rule 19 (expression -> NOT expression .)
    RBRACKET        reduce using rule 19 (expression -> NOT expression .)
    THEN            reduce using rule 19 (expression -> NOT expression .)
    LOOP            reduce using rule 19 (expression -> NOT expression .)
    OF              reduce using rule 19 (expression -> NOT expression .)
    ELSE            reduce using rule 19 (expression -> NOT expression .)
    POOL            reduce using rule 19 (expression -> NOT expression .)
    RBRACE          reduce using rule 19 (expression -> NOT expression .)
    FI              reduce using rule 19 (expression -> NOT expression .)
    LTHAN           shift and go to state 56
    LETHAN          shift and go to state 57
    EQUALS          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    DISP            shift and go to state 64

  ! LTHAN           [ reduce using rule 19 (expression -> NOT expression .) ]
  ! LETHAN          [ reduce using rule 19 (expression -> NOT expression .) ]
  ! EQUALS          [ reduce using rule 19 (expression -> NOT expression .) ]
  ! PLUS            [ reduce using rule 19 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 19 (expression -> NOT expression .) ]
  ! TIMES           [ reduce using rule 19 (expression -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 19 (expression -> NOT expression .) ]
  ! DISP            [ reduce using rule 19 (expression -> NOT expression .) ]
  ! DOT             [ reduce using rule 53 (empty -> .) ]

    especific                      shift and go to state 63
    empty                          shift and go to state 65

state 67

    (27) expression -> MINUS expression .
    (20) expression -> expression . LTHAN expression
    (21) expression -> expression . LETHAN expression
    (22) expression -> expression . EQUALS expression
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (45) dispatch -> expression . especific DOT dispatch_call
    (47) especific -> . DISP TYPE
    (48) especific -> . empty
    (53) empty -> .

  ! reduce/reduce conflict for DOT resolved using rule 27 (expression -> MINUS expression .)
    LTHAN           reduce using rule 27 (expression -> MINUS expression .)
    LETHAN          reduce using rule 27 (expression -> MINUS expression .)
    EQUALS          reduce using rule 27 (expression -> MINUS expression .)
    PLUS            reduce using rule 27 (expression -> MINUS expression .)
    MINUS           reduce using rule 27 (expression -> MINUS expression .)
    TIMES           reduce using rule 27 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 27 (expression -> MINUS expression .)
    DOT             reduce using rule 27 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 27 (expression -> MINUS expression .)
    COMMA           reduce using rule 27 (expression -> MINUS expression .)
    IN              reduce using rule 27 (expression -> MINUS expression .)
    RBRACKET        reduce using rule 27 (expression -> MINUS expression .)
    THEN            reduce using rule 27 (expression -> MINUS expression .)
    LOOP            reduce using rule 27 (expression -> MINUS expression .)
    OF              reduce using rule 27 (expression -> MINUS expression .)
    ELSE            reduce using rule 27 (expression -> MINUS expression .)
    POOL            reduce using rule 27 (expression -> MINUS expression .)
    RBRACE          reduce using rule 27 (expression -> MINUS expression .)
    FI              reduce using rule 27 (expression -> MINUS expression .)
    DISP            shift and go to state 64

  ! DISP            [ reduce using rule 27 (expression -> MINUS expression .) ]
  ! LTHAN           [ shift and go to state 56 ]
  ! LETHAN          [ shift and go to state 57 ]
  ! EQUALS          [ shift and go to state 58 ]
  ! PLUS            [ shift and go to state 59 ]
  ! MINUS           [ shift and go to state 60 ]
  ! TIMES           [ shift and go to state 61 ]
  ! DIVIDE          [ shift and go to state 62 ]
  ! DOT             [ reduce using rule 53 (empty -> .) ]

    especific                      shift and go to state 63
    empty                          shift and go to state 65

state 68

    (43) expression -> MINUS let_expression .
    (44) expression -> let_expression .

  ! reduce/reduce conflict for LTHAN resolved using rule 43 (expression -> MINUS let_expression .)
  ! reduce/reduce conflict for LETHAN resolved using rule 43 (expression -> MINUS let_expression .)
  ! reduce/reduce conflict for EQUALS resolved using rule 43 (expression -> MINUS let_expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 43 (expression -> MINUS let_expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 43 (expression -> MINUS let_expression .)
  ! reduce/reduce conflict for TIMES resolved using rule 43 (expression -> MINUS let_expression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 43 (expression -> MINUS let_expression .)
  ! reduce/reduce conflict for DISP resolved using rule 43 (expression -> MINUS let_expression .)
  ! reduce/reduce conflict for DOT resolved using rule 43 (expression -> MINUS let_expression .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 43 (expression -> MINUS let_expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 43 (expression -> MINUS let_expression .)
  ! reduce/reduce conflict for IN resolved using rule 43 (expression -> MINUS let_expression .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 43 (expression -> MINUS let_expression .)
  ! reduce/reduce conflict for THEN resolved using rule 43 (expression -> MINUS let_expression .)
  ! reduce/reduce conflict for LOOP resolved using rule 43 (expression -> MINUS let_expression .)
  ! reduce/reduce conflict for OF resolved using rule 43 (expression -> MINUS let_expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 43 (expression -> MINUS let_expression .)
  ! reduce/reduce conflict for POOL resolved using rule 43 (expression -> MINUS let_expression .)
  ! reduce/reduce conflict for RBRACE resolved using rule 43 (expression -> MINUS let_expression .)
  ! reduce/reduce conflict for FI resolved using rule 43 (expression -> MINUS let_expression .)
    LTHAN           reduce using rule 43 (expression -> MINUS let_expression .)
    LETHAN          reduce using rule 43 (expression -> MINUS let_expression .)
    EQUALS          reduce using rule 43 (expression -> MINUS let_expression .)
    PLUS            reduce using rule 43 (expression -> MINUS let_expression .)
    MINUS           reduce using rule 43 (expression -> MINUS let_expression .)
    TIMES           reduce using rule 43 (expression -> MINUS let_expression .)
    DIVIDE          reduce using rule 43 (expression -> MINUS let_expression .)
    DISP            reduce using rule 43 (expression -> MINUS let_expression .)
    DOT             reduce using rule 43 (expression -> MINUS let_expression .)
    SEMICOLON       reduce using rule 43 (expression -> MINUS let_expression .)
    COMMA           reduce using rule 43 (expression -> MINUS let_expression .)
    IN              reduce using rule 43 (expression -> MINUS let_expression .)
    RBRACKET        reduce using rule 43 (expression -> MINUS let_expression .)
    THEN            reduce using rule 43 (expression -> MINUS let_expression .)
    LOOP            reduce using rule 43 (expression -> MINUS let_expression .)
    OF              reduce using rule 43 (expression -> MINUS let_expression .)
    ELSE            reduce using rule 43 (expression -> MINUS let_expression .)
    POOL            reduce using rule 43 (expression -> MINUS let_expression .)
    RBRACE          reduce using rule 43 (expression -> MINUS let_expression .)
    FI              reduce using rule 43 (expression -> MINUS let_expression .)

  ! LTHAN           [ reduce using rule 44 (expression -> let_expression .) ]
  ! LETHAN          [ reduce using rule 44 (expression -> let_expression .) ]
  ! EQUALS          [ reduce using rule 44 (expression -> let_expression .) ]
  ! PLUS            [ reduce using rule 44 (expression -> let_expression .) ]
  ! MINUS           [ reduce using rule 44 (expression -> let_expression .) ]
  ! TIMES           [ reduce using rule 44 (expression -> let_expression .) ]
  ! DIVIDE          [ reduce using rule 44 (expression -> let_expression .) ]
  ! DISP            [ reduce using rule 44 (expression -> let_expression .) ]
  ! DOT             [ reduce using rule 44 (expression -> let_expression .) ]
  ! SEMICOLON       [ reduce using rule 44 (expression -> let_expression .) ]
  ! COMMA           [ reduce using rule 44 (expression -> let_expression .) ]
  ! IN              [ reduce using rule 44 (expression -> let_expression .) ]
  ! RBRACKET        [ reduce using rule 44 (expression -> let_expression .) ]
  ! THEN            [ reduce using rule 44 (expression -> let_expression .) ]
  ! LOOP            [ reduce using rule 44 (expression -> let_expression .) ]
  ! OF              [ reduce using rule 44 (expression -> let_expression .) ]
  ! ELSE            [ reduce using rule 44 (expression -> let_expression .) ]
  ! POOL            [ reduce using rule 44 (expression -> let_expression .) ]
  ! RBRACE          [ reduce using rule 44 (expression -> let_expression .) ]
  ! FI              [ reduce using rule 44 (expression -> let_expression .) ]


state 69

    (28) expression -> LBRACKET expression . RBRACKET
    (20) expression -> expression . LTHAN expression
    (21) expression -> expression . LETHAN expression
    (22) expression -> expression . EQUALS expression
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (45) dispatch -> expression . especific DOT dispatch_call
    (47) especific -> . DISP TYPE
    (48) especific -> . empty
    (53) empty -> .

    RBRACKET        shift and go to state 93
    LTHAN           shift and go to state 56
    LETHAN          shift and go to state 57
    EQUALS          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    DISP            shift and go to state 64
    DOT             reduce using rule 53 (empty -> .)

    especific                      shift and go to state 63
    empty                          shift and go to state 65

state 70

    (29) expression -> ISVOID expression .
    (20) expression -> expression . LTHAN expression
    (21) expression -> expression . LETHAN expression
    (22) expression -> expression . EQUALS expression
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (45) dispatch -> expression . especific DOT dispatch_call
    (47) especific -> . DISP TYPE
    (48) especific -> . empty
    (53) empty -> .

  ! reduce/reduce conflict for DOT resolved using rule 29 (expression -> ISVOID expression .)
    LTHAN           reduce using rule 29 (expression -> ISVOID expression .)
    LETHAN          reduce using rule 29 (expression -> ISVOID expression .)
    EQUALS          reduce using rule 29 (expression -> ISVOID expression .)
    PLUS            reduce using rule 29 (expression -> ISVOID expression .)
    MINUS           reduce using rule 29 (expression -> ISVOID expression .)
    TIMES           reduce using rule 29 (expression -> ISVOID expression .)
    DIVIDE          reduce using rule 29 (expression -> ISVOID expression .)
    DOT             reduce using rule 29 (expression -> ISVOID expression .)
    SEMICOLON       reduce using rule 29 (expression -> ISVOID expression .)
    COMMA           reduce using rule 29 (expression -> ISVOID expression .)
    IN              reduce using rule 29 (expression -> ISVOID expression .)
    RBRACKET        reduce using rule 29 (expression -> ISVOID expression .)
    THEN            reduce using rule 29 (expression -> ISVOID expression .)
    LOOP            reduce using rule 29 (expression -> ISVOID expression .)
    OF              reduce using rule 29 (expression -> ISVOID expression .)
    ELSE            reduce using rule 29 (expression -> ISVOID expression .)
    POOL            reduce using rule 29 (expression -> ISVOID expression .)
    RBRACE          reduce using rule 29 (expression -> ISVOID expression .)
    FI              reduce using rule 29 (expression -> ISVOID expression .)
    DISP            shift and go to state 64

  ! DISP            [ reduce using rule 29 (expression -> ISVOID expression .) ]
  ! LTHAN           [ shift and go to state 56 ]
  ! LETHAN          [ shift and go to state 57 ]
  ! EQUALS          [ shift and go to state 58 ]
  ! PLUS            [ shift and go to state 59 ]
  ! MINUS           [ shift and go to state 60 ]
  ! TIMES           [ shift and go to state 61 ]
  ! DIVIDE          [ shift and go to state 62 ]
  ! DOT             [ reduce using rule 53 (empty -> .) ]

    especific                      shift and go to state 63
    empty                          shift and go to state 65

state 71

    (35) expression -> BCOMPLEMENT expression .
    (20) expression -> expression . LTHAN expression
    (21) expression -> expression . LETHAN expression
    (22) expression -> expression . EQUALS expression
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (45) dispatch -> expression . especific DOT dispatch_call
    (47) especific -> . DISP TYPE
    (48) especific -> . empty
    (53) empty -> .

  ! reduce/reduce conflict for DOT resolved using rule 35 (expression -> BCOMPLEMENT expression .)
    LTHAN           reduce using rule 35 (expression -> BCOMPLEMENT expression .)
    LETHAN          reduce using rule 35 (expression -> BCOMPLEMENT expression .)
    EQUALS          reduce using rule 35 (expression -> BCOMPLEMENT expression .)
    PLUS            reduce using rule 35 (expression -> BCOMPLEMENT expression .)
    MINUS           reduce using rule 35 (expression -> BCOMPLEMENT expression .)
    TIMES           reduce using rule 35 (expression -> BCOMPLEMENT expression .)
    DIVIDE          reduce using rule 35 (expression -> BCOMPLEMENT expression .)
    DOT             reduce using rule 35 (expression -> BCOMPLEMENT expression .)
    SEMICOLON       reduce using rule 35 (expression -> BCOMPLEMENT expression .)
    COMMA           reduce using rule 35 (expression -> BCOMPLEMENT expression .)
    IN              reduce using rule 35 (expression -> BCOMPLEMENT expression .)
    RBRACKET        reduce using rule 35 (expression -> BCOMPLEMENT expression .)
    THEN            reduce using rule 35 (expression -> BCOMPLEMENT expression .)
    LOOP            reduce using rule 35 (expression -> BCOMPLEMENT expression .)
    OF              reduce using rule 35 (expression -> BCOMPLEMENT expression .)
    ELSE            reduce using rule 35 (expression -> BCOMPLEMENT expression .)
    POOL            reduce using rule 35 (expression -> BCOMPLEMENT expression .)
    RBRACE          reduce using rule 35 (expression -> BCOMPLEMENT expression .)
    FI              reduce using rule 35 (expression -> BCOMPLEMENT expression .)
    DISP            shift and go to state 64

  ! DISP            [ reduce using rule 35 (expression -> BCOMPLEMENT expression .) ]
  ! LTHAN           [ shift and go to state 56 ]
  ! LETHAN          [ shift and go to state 57 ]
  ! EQUALS          [ shift and go to state 58 ]
  ! PLUS            [ shift and go to state 59 ]
  ! MINUS           [ shift and go to state 60 ]
  ! TIMES           [ shift and go to state 61 ]
  ! DIVIDE          [ shift and go to state 62 ]
  ! DOT             [ reduce using rule 53 (empty -> .) ]

    especific                      shift and go to state 63
    empty                          shift and go to state 65

state 72

    (63) expression -> ID ASSIGN . expression
    (19) expression -> . NOT expression
    (20) expression -> . expression LTHAN expression
    (21) expression -> . expression LETHAN expression
    (22) expression -> . expression EQUALS expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . MINUS expression
    (28) expression -> . LBRACKET expression RBRACKET
    (29) expression -> . ISVOID expression
    (30) expression -> . block
    (31) expression -> . conditional
    (32) expression -> . loop
    (33) expression -> . case
    (34) expression -> . dispatch
    (35) expression -> . BCOMPLEMENT expression
    (37) expression -> . ID
    (38) expression -> . INTEGER
    (39) expression -> . STRING
    (40) expression -> . TRUE
    (41) expression -> . FALSE
    (42) expression -> . NEW TYPE
    (43) expression -> . MINUS let_expression
    (44) expression -> . let_expression
    (63) expression -> . ID ASSIGN expression
    (36) block -> . LBRACE expression_list RBRACE
    (57) conditional -> . IF expression THEN expression ELSE expression FI
    (58) loop -> . WHILE expression LOOP expression POOL
    (59) case -> . CASE expression OF implications ESAC
    (45) dispatch -> . expression especific DOT dispatch_call
    (46) dispatch -> . dispatch_call
    (54) let_expression -> . LET declaration_list IN expression
    (49) dispatch_call -> . ID LBRACKET params_expression RBRACKET

    NOT             shift and go to state 31
    MINUS           shift and go to state 32
    LBRACKET        shift and go to state 33
    ISVOID          shift and go to state 34
    BCOMPLEMENT     shift and go to state 40
    ID              shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NEW             shift and go to state 46
    LBRACE          shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    CASE            shift and go to state 51
    LET             shift and go to state 53

    expression                     shift and go to state 94
    block                          shift and go to state 35
    conditional                    shift and go to state 36
    loop                           shift and go to state 37
    case                           shift and go to state 38
    dispatch                       shift and go to state 39
    let_expression                 shift and go to state 47
    dispatch_call                  shift and go to state 52

state 73

    (49) dispatch_call -> ID LBRACKET . params_expression RBRACKET
    (50) params_expression -> . expression
    (51) params_expression -> . expression COMMA params_expression
    (52) params_expression -> . empty
    (19) expression -> . NOT expression
    (20) expression -> . expression LTHAN expression
    (21) expression -> . expression LETHAN expression
    (22) expression -> . expression EQUALS expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . MINUS expression
    (28) expression -> . LBRACKET expression RBRACKET
    (29) expression -> . ISVOID expression
    (30) expression -> . block
    (31) expression -> . conditional
    (32) expression -> . loop
    (33) expression -> . case
    (34) expression -> . dispatch
    (35) expression -> . BCOMPLEMENT expression
    (37) expression -> . ID
    (38) expression -> . INTEGER
    (39) expression -> . STRING
    (40) expression -> . TRUE
    (41) expression -> . FALSE
    (42) expression -> . NEW TYPE
    (43) expression -> . MINUS let_expression
    (44) expression -> . let_expression
    (63) expression -> . ID ASSIGN expression
    (53) empty -> .
    (36) block -> . LBRACE expression_list RBRACE
    (57) conditional -> . IF expression THEN expression ELSE expression FI
    (58) loop -> . WHILE expression LOOP expression POOL
    (59) case -> . CASE expression OF implications ESAC
    (45) dispatch -> . expression especific DOT dispatch_call
    (46) dispatch -> . dispatch_call
    (54) let_expression -> . LET declaration_list IN expression
    (49) dispatch_call -> . ID LBRACKET params_expression RBRACKET

    NOT             shift and go to state 31
    MINUS           shift and go to state 32
    LBRACKET        shift and go to state 33
    ISVOID          shift and go to state 34
    BCOMPLEMENT     shift and go to state 40
    ID              shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NEW             shift and go to state 46
    RBRACKET        reduce using rule 53 (empty -> .)
    LBRACE          shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    CASE            shift and go to state 51
    LET             shift and go to state 53

    params_expression              shift and go to state 95
    expression                     shift and go to state 96
    empty                          shift and go to state 97
    block                          shift and go to state 35
    conditional                    shift and go to state 36
    loop                           shift and go to state 37
    case                           shift and go to state 38
    dispatch                       shift and go to state 39
    let_expression                 shift and go to state 47
    dispatch_call                  shift and go to state 52

state 74

    (42) expression -> NEW TYPE .

    LTHAN           reduce using rule 42 (expression -> NEW TYPE .)
    LETHAN          reduce using rule 42 (expression -> NEW TYPE .)
    EQUALS          reduce using rule 42 (expression -> NEW TYPE .)
    PLUS            reduce using rule 42 (expression -> NEW TYPE .)
    MINUS           reduce using rule 42 (expression -> NEW TYPE .)
    TIMES           reduce using rule 42 (expression -> NEW TYPE .)
    DIVIDE          reduce using rule 42 (expression -> NEW TYPE .)
    DISP            reduce using rule 42 (expression -> NEW TYPE .)
    DOT             reduce using rule 42 (expression -> NEW TYPE .)
    SEMICOLON       reduce using rule 42 (expression -> NEW TYPE .)
    COMMA           reduce using rule 42 (expression -> NEW TYPE .)
    IN              reduce using rule 42 (expression -> NEW TYPE .)
    RBRACKET        reduce using rule 42 (expression -> NEW TYPE .)
    THEN            reduce using rule 42 (expression -> NEW TYPE .)
    LOOP            reduce using rule 42 (expression -> NEW TYPE .)
    OF              reduce using rule 42 (expression -> NEW TYPE .)
    ELSE            reduce using rule 42 (expression -> NEW TYPE .)
    POOL            reduce using rule 42 (expression -> NEW TYPE .)
    RBRACE          reduce using rule 42 (expression -> NEW TYPE .)
    FI              reduce using rule 42 (expression -> NEW TYPE .)


state 75

    (36) block -> LBRACE expression_list . RBRACE

    RBRACE          shift and go to state 98


state 76

    (17) expression_list -> expression . SEMICOLON expression_list
    (18) expression_list -> expression . SEMICOLON
    (20) expression -> expression . LTHAN expression
    (21) expression -> expression . LETHAN expression
    (22) expression -> expression . EQUALS expression
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (45) dispatch -> expression . especific DOT dispatch_call
    (47) especific -> . DISP TYPE
    (48) especific -> . empty
    (53) empty -> .

    SEMICOLON       shift and go to state 99
    LTHAN           shift and go to state 56
    LETHAN          shift and go to state 57
    EQUALS          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    DISP            shift and go to state 64
    DOT             reduce using rule 53 (empty -> .)

    especific                      shift and go to state 63
    empty                          shift and go to state 65

state 77

    (57) conditional -> IF expression . THEN expression ELSE expression FI
    (20) expression -> expression . LTHAN expression
    (21) expression -> expression . LETHAN expression
    (22) expression -> expression . EQUALS expression
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (45) dispatch -> expression . especific DOT dispatch_call
    (47) especific -> . DISP TYPE
    (48) especific -> . empty
    (53) empty -> .

    THEN            shift and go to state 100
    LTHAN           shift and go to state 56
    LETHAN          shift and go to state 57
    EQUALS          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    DISP            shift and go to state 64
    DOT             reduce using rule 53 (empty -> .)

    especific                      shift and go to state 63
    empty                          shift and go to state 65

state 78

    (58) loop -> WHILE expression . LOOP expression POOL
    (20) expression -> expression . LTHAN expression
    (21) expression -> expression . LETHAN expression
    (22) expression -> expression . EQUALS expression
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (45) dispatch -> expression . especific DOT dispatch_call
    (47) especific -> . DISP TYPE
    (48) especific -> . empty
    (53) empty -> .

    LOOP            shift and go to state 101
    LTHAN           shift and go to state 56
    LETHAN          shift and go to state 57
    EQUALS          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    DISP            shift and go to state 64
    DOT             reduce using rule 53 (empty -> .)

    especific                      shift and go to state 63
    empty                          shift and go to state 65

state 79

    (59) case -> CASE expression . OF implications ESAC
    (20) expression -> expression . LTHAN expression
    (21) expression -> expression . LETHAN expression
    (22) expression -> expression . EQUALS expression
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (45) dispatch -> expression . especific DOT dispatch_call
    (47) especific -> . DISP TYPE
    (48) especific -> . empty
    (53) empty -> .

    OF              shift and go to state 102
    LTHAN           shift and go to state 56
    LETHAN          shift and go to state 57
    EQUALS          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    DISP            shift and go to state 64
    DOT             reduce using rule 53 (empty -> .)

    especific                      shift and go to state 63
    empty                          shift and go to state 65

state 80

    (54) let_expression -> LET declaration_list . IN expression

    IN              shift and go to state 103


state 81

    (55) declaration_list -> attribute . COMMA declaration_list
    (56) declaration_list -> attribute .

    COMMA           shift and go to state 104
    IN              reduce using rule 56 (declaration_list -> attribute .)


state 82

    (13) method_declaration -> ID LBRACKET formals RBRACKET TDOTS . TYPE LBRACE expression RBRACE

    TYPE            shift and go to state 105


state 83

    (14) formals -> id_type COMMA formals .

    RBRACKET        reduce using rule 14 (formals -> id_type COMMA formals .)


state 84

    (20) expression -> expression LTHAN expression .
    (20) expression -> expression . LTHAN expression
    (21) expression -> expression . LETHAN expression
    (22) expression -> expression . EQUALS expression
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (45) dispatch -> expression . especific DOT dispatch_call
    (47) especific -> . DISP TYPE
    (48) especific -> . empty
    (53) empty -> .

  ! reduce/reduce conflict for DOT resolved using rule 20 (expression -> expression LTHAN expression .)
    LTHAN           reduce using rule 20 (expression -> expression LTHAN expression .)
    LETHAN          reduce using rule 20 (expression -> expression LTHAN expression .)
    EQUALS          reduce using rule 20 (expression -> expression LTHAN expression .)
    DOT             reduce using rule 20 (expression -> expression LTHAN expression .)
    SEMICOLON       reduce using rule 20 (expression -> expression LTHAN expression .)
    COMMA           reduce using rule 20 (expression -> expression LTHAN expression .)
    IN              reduce using rule 20 (expression -> expression LTHAN expression .)
    RBRACKET        reduce using rule 20 (expression -> expression LTHAN expression .)
    THEN            reduce using rule 20 (expression -> expression LTHAN expression .)
    LOOP            reduce using rule 20 (expression -> expression LTHAN expression .)
    OF              reduce using rule 20 (expression -> expression LTHAN expression .)
    ELSE            reduce using rule 20 (expression -> expression LTHAN expression .)
    POOL            reduce using rule 20 (expression -> expression LTHAN expression .)
    RBRACE          reduce using rule 20 (expression -> expression LTHAN expression .)
    FI              reduce using rule 20 (expression -> expression LTHAN expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    DISP            shift and go to state 64

  ! PLUS            [ reduce using rule 20 (expression -> expression LTHAN expression .) ]
  ! MINUS           [ reduce using rule 20 (expression -> expression LTHAN expression .) ]
  ! TIMES           [ reduce using rule 20 (expression -> expression LTHAN expression .) ]
  ! DIVIDE          [ reduce using rule 20 (expression -> expression LTHAN expression .) ]
  ! DISP            [ reduce using rule 20 (expression -> expression LTHAN expression .) ]
  ! LTHAN           [ shift and go to state 56 ]
  ! LETHAN          [ shift and go to state 57 ]
  ! EQUALS          [ shift and go to state 58 ]
  ! DOT             [ reduce using rule 53 (empty -> .) ]

    especific                      shift and go to state 63
    empty                          shift and go to state 65

state 85

    (21) expression -> expression LETHAN expression .
    (20) expression -> expression . LTHAN expression
    (21) expression -> expression . LETHAN expression
    (22) expression -> expression . EQUALS expression
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (45) dispatch -> expression . especific DOT dispatch_call
    (47) especific -> . DISP TYPE
    (48) especific -> . empty
    (53) empty -> .

  ! reduce/reduce conflict for DOT resolved using rule 21 (expression -> expression LETHAN expression .)
    LTHAN           reduce using rule 21 (expression -> expression LETHAN expression .)
    LETHAN          reduce using rule 21 (expression -> expression LETHAN expression .)
    EQUALS          reduce using rule 21 (expression -> expression LETHAN expression .)
    DOT             reduce using rule 21 (expression -> expression LETHAN expression .)
    SEMICOLON       reduce using rule 21 (expression -> expression LETHAN expression .)
    COMMA           reduce using rule 21 (expression -> expression LETHAN expression .)
    IN              reduce using rule 21 (expression -> expression LETHAN expression .)
    RBRACKET        reduce using rule 21 (expression -> expression LETHAN expression .)
    THEN            reduce using rule 21 (expression -> expression LETHAN expression .)
    LOOP            reduce using rule 21 (expression -> expression LETHAN expression .)
    OF              reduce using rule 21 (expression -> expression LETHAN expression .)
    ELSE            reduce using rule 21 (expression -> expression LETHAN expression .)
    POOL            reduce using rule 21 (expression -> expression LETHAN expression .)
    RBRACE          reduce using rule 21 (expression -> expression LETHAN expression .)
    FI              reduce using rule 21 (expression -> expression LETHAN expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    DISP            shift and go to state 64

  ! PLUS            [ reduce using rule 21 (expression -> expression LETHAN expression .) ]
  ! MINUS           [ reduce using rule 21 (expression -> expression LETHAN expression .) ]
  ! TIMES           [ reduce using rule 21 (expression -> expression LETHAN expression .) ]
  ! DIVIDE          [ reduce using rule 21 (expression -> expression LETHAN expression .) ]
  ! DISP            [ reduce using rule 21 (expression -> expression LETHAN expression .) ]
  ! LTHAN           [ shift and go to state 56 ]
  ! LETHAN          [ shift and go to state 57 ]
  ! EQUALS          [ shift and go to state 58 ]
  ! DOT             [ reduce using rule 53 (empty -> .) ]

    especific                      shift and go to state 63
    empty                          shift and go to state 65

state 86

    (22) expression -> expression EQUALS expression .
    (20) expression -> expression . LTHAN expression
    (21) expression -> expression . LETHAN expression
    (22) expression -> expression . EQUALS expression
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (45) dispatch -> expression . especific DOT dispatch_call
    (47) especific -> . DISP TYPE
    (48) especific -> . empty
    (53) empty -> .

  ! reduce/reduce conflict for DOT resolved using rule 22 (expression -> expression EQUALS expression .)
    LTHAN           reduce using rule 22 (expression -> expression EQUALS expression .)
    LETHAN          reduce using rule 22 (expression -> expression EQUALS expression .)
    EQUALS          reduce using rule 22 (expression -> expression EQUALS expression .)
    DOT             reduce using rule 22 (expression -> expression EQUALS expression .)
    SEMICOLON       reduce using rule 22 (expression -> expression EQUALS expression .)
    COMMA           reduce using rule 22 (expression -> expression EQUALS expression .)
    IN              reduce using rule 22 (expression -> expression EQUALS expression .)
    RBRACKET        reduce using rule 22 (expression -> expression EQUALS expression .)
    THEN            reduce using rule 22 (expression -> expression EQUALS expression .)
    LOOP            reduce using rule 22 (expression -> expression EQUALS expression .)
    OF              reduce using rule 22 (expression -> expression EQUALS expression .)
    ELSE            reduce using rule 22 (expression -> expression EQUALS expression .)
    POOL            reduce using rule 22 (expression -> expression EQUALS expression .)
    RBRACE          reduce using rule 22 (expression -> expression EQUALS expression .)
    FI              reduce using rule 22 (expression -> expression EQUALS expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    DISP            shift and go to state 64

  ! PLUS            [ reduce using rule 22 (expression -> expression EQUALS expression .) ]
  ! MINUS           [ reduce using rule 22 (expression -> expression EQUALS expression .) ]
  ! TIMES           [ reduce using rule 22 (expression -> expression EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 22 (expression -> expression EQUALS expression .) ]
  ! DISP            [ reduce using rule 22 (expression -> expression EQUALS expression .) ]
  ! LTHAN           [ shift and go to state 56 ]
  ! LETHAN          [ shift and go to state 57 ]
  ! EQUALS          [ shift and go to state 58 ]
  ! DOT             [ reduce using rule 53 (empty -> .) ]

    especific                      shift and go to state 63
    empty                          shift and go to state 65

state 87

    (23) expression -> expression PLUS expression .
    (20) expression -> expression . LTHAN expression
    (21) expression -> expression . LETHAN expression
    (22) expression -> expression . EQUALS expression
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (45) dispatch -> expression . especific DOT dispatch_call
    (47) especific -> . DISP TYPE
    (48) especific -> . empty
    (53) empty -> .

  ! reduce/reduce conflict for DOT resolved using rule 23 (expression -> expression PLUS expression .)
    LTHAN           reduce using rule 23 (expression -> expression PLUS expression .)
    LETHAN          reduce using rule 23 (expression -> expression PLUS expression .)
    EQUALS          reduce using rule 23 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 23 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 23 (expression -> expression PLUS expression .)
    DOT             reduce using rule 23 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 23 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 23 (expression -> expression PLUS expression .)
    IN              reduce using rule 23 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 23 (expression -> expression PLUS expression .)
    THEN            reduce using rule 23 (expression -> expression PLUS expression .)
    LOOP            reduce using rule 23 (expression -> expression PLUS expression .)
    OF              reduce using rule 23 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 23 (expression -> expression PLUS expression .)
    POOL            reduce using rule 23 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 23 (expression -> expression PLUS expression .)
    FI              reduce using rule 23 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    DISP            shift and go to state 64

  ! TIMES           [ reduce using rule 23 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 23 (expression -> expression PLUS expression .) ]
  ! DISP            [ reduce using rule 23 (expression -> expression PLUS expression .) ]
  ! LTHAN           [ shift and go to state 56 ]
  ! LETHAN          [ shift and go to state 57 ]
  ! EQUALS          [ shift and go to state 58 ]
  ! PLUS            [ shift and go to state 59 ]
  ! MINUS           [ shift and go to state 60 ]
  ! DOT             [ reduce using rule 53 (empty -> .) ]

    especific                      shift and go to state 63
    empty                          shift and go to state 65

state 88

    (24) expression -> expression MINUS expression .
    (20) expression -> expression . LTHAN expression
    (21) expression -> expression . LETHAN expression
    (22) expression -> expression . EQUALS expression
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (45) dispatch -> expression . especific DOT dispatch_call
    (47) especific -> . DISP TYPE
    (48) especific -> . empty
    (53) empty -> .

  ! reduce/reduce conflict for DOT resolved using rule 24 (expression -> expression MINUS expression .)
    LTHAN           reduce using rule 24 (expression -> expression MINUS expression .)
    LETHAN          reduce using rule 24 (expression -> expression MINUS expression .)
    EQUALS          reduce using rule 24 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 24 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 24 (expression -> expression MINUS expression .)
    DOT             reduce using rule 24 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 24 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 24 (expression -> expression MINUS expression .)
    IN              reduce using rule 24 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 24 (expression -> expression MINUS expression .)
    THEN            reduce using rule 24 (expression -> expression MINUS expression .)
    LOOP            reduce using rule 24 (expression -> expression MINUS expression .)
    OF              reduce using rule 24 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 24 (expression -> expression MINUS expression .)
    POOL            reduce using rule 24 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 24 (expression -> expression MINUS expression .)
    FI              reduce using rule 24 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    DISP            shift and go to state 64

  ! TIMES           [ reduce using rule 24 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 24 (expression -> expression MINUS expression .) ]
  ! DISP            [ reduce using rule 24 (expression -> expression MINUS expression .) ]
  ! LTHAN           [ shift and go to state 56 ]
  ! LETHAN          [ shift and go to state 57 ]
  ! EQUALS          [ shift and go to state 58 ]
  ! PLUS            [ shift and go to state 59 ]
  ! MINUS           [ shift and go to state 60 ]
  ! DOT             [ reduce using rule 53 (empty -> .) ]

    especific                      shift and go to state 63
    empty                          shift and go to state 65

state 89

    (25) expression -> expression TIMES expression .
    (20) expression -> expression . LTHAN expression
    (21) expression -> expression . LETHAN expression
    (22) expression -> expression . EQUALS expression
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (45) dispatch -> expression . especific DOT dispatch_call
    (47) especific -> . DISP TYPE
    (48) especific -> . empty
    (53) empty -> .

  ! reduce/reduce conflict for DOT resolved using rule 25 (expression -> expression TIMES expression .)
    LTHAN           reduce using rule 25 (expression -> expression TIMES expression .)
    LETHAN          reduce using rule 25 (expression -> expression TIMES expression .)
    EQUALS          reduce using rule 25 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 25 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 25 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 25 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 25 (expression -> expression TIMES expression .)
    DOT             reduce using rule 25 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 25 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 25 (expression -> expression TIMES expression .)
    IN              reduce using rule 25 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 25 (expression -> expression TIMES expression .)
    THEN            reduce using rule 25 (expression -> expression TIMES expression .)
    LOOP            reduce using rule 25 (expression -> expression TIMES expression .)
    OF              reduce using rule 25 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 25 (expression -> expression TIMES expression .)
    POOL            reduce using rule 25 (expression -> expression TIMES expression .)
    RBRACE          reduce using rule 25 (expression -> expression TIMES expression .)
    FI              reduce using rule 25 (expression -> expression TIMES expression .)
    DISP            shift and go to state 64

  ! DISP            [ reduce using rule 25 (expression -> expression TIMES expression .) ]
  ! LTHAN           [ shift and go to state 56 ]
  ! LETHAN          [ shift and go to state 57 ]
  ! EQUALS          [ shift and go to state 58 ]
  ! PLUS            [ shift and go to state 59 ]
  ! MINUS           [ shift and go to state 60 ]
  ! TIMES           [ shift and go to state 61 ]
  ! DIVIDE          [ shift and go to state 62 ]
  ! DOT             [ reduce using rule 53 (empty -> .) ]

    especific                      shift and go to state 63
    empty                          shift and go to state 65

state 90

    (26) expression -> expression DIVIDE expression .
    (20) expression -> expression . LTHAN expression
    (21) expression -> expression . LETHAN expression
    (22) expression -> expression . EQUALS expression
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (45) dispatch -> expression . especific DOT dispatch_call
    (47) especific -> . DISP TYPE
    (48) especific -> . empty
    (53) empty -> .

  ! reduce/reduce conflict for DOT resolved using rule 26 (expression -> expression DIVIDE expression .)
    LTHAN           reduce using rule 26 (expression -> expression DIVIDE expression .)
    LETHAN          reduce using rule 26 (expression -> expression DIVIDE expression .)
    EQUALS          reduce using rule 26 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 26 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 26 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 26 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 26 (expression -> expression DIVIDE expression .)
    DOT             reduce using rule 26 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 26 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 26 (expression -> expression DIVIDE expression .)
    IN              reduce using rule 26 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 26 (expression -> expression DIVIDE expression .)
    THEN            reduce using rule 26 (expression -> expression DIVIDE expression .)
    LOOP            reduce using rule 26 (expression -> expression DIVIDE expression .)
    OF              reduce using rule 26 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 26 (expression -> expression DIVIDE expression .)
    POOL            reduce using rule 26 (expression -> expression DIVIDE expression .)
    RBRACE          reduce using rule 26 (expression -> expression DIVIDE expression .)
    FI              reduce using rule 26 (expression -> expression DIVIDE expression .)
    DISP            shift and go to state 64

  ! DISP            [ reduce using rule 26 (expression -> expression DIVIDE expression .) ]
  ! LTHAN           [ shift and go to state 56 ]
  ! LETHAN          [ shift and go to state 57 ]
  ! EQUALS          [ shift and go to state 58 ]
  ! PLUS            [ shift and go to state 59 ]
  ! MINUS           [ shift and go to state 60 ]
  ! TIMES           [ shift and go to state 61 ]
  ! DIVIDE          [ shift and go to state 62 ]
  ! DOT             [ reduce using rule 53 (empty -> .) ]

    especific                      shift and go to state 63
    empty                          shift and go to state 65

state 91

    (45) dispatch -> expression especific DOT . dispatch_call
    (49) dispatch_call -> . ID LBRACKET params_expression RBRACKET

    ID              shift and go to state 107

    dispatch_call                  shift and go to state 106

state 92

    (47) especific -> DISP TYPE .

    DOT             reduce using rule 47 (especific -> DISP TYPE .)


state 93

    (28) expression -> LBRACKET expression RBRACKET .

    LTHAN           reduce using rule 28 (expression -> LBRACKET expression RBRACKET .)
    LETHAN          reduce using rule 28 (expression -> LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 28 (expression -> LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 28 (expression -> LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 28 (expression -> LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 28 (expression -> LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 28 (expression -> LBRACKET expression RBRACKET .)
    DISP            reduce using rule 28 (expression -> LBRACKET expression RBRACKET .)
    DOT             reduce using rule 28 (expression -> LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 28 (expression -> LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 28 (expression -> LBRACKET expression RBRACKET .)
    IN              reduce using rule 28 (expression -> LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 28 (expression -> LBRACKET expression RBRACKET .)
    THEN            reduce using rule 28 (expression -> LBRACKET expression RBRACKET .)
    LOOP            reduce using rule 28 (expression -> LBRACKET expression RBRACKET .)
    OF              reduce using rule 28 (expression -> LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 28 (expression -> LBRACKET expression RBRACKET .)
    POOL            reduce using rule 28 (expression -> LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 28 (expression -> LBRACKET expression RBRACKET .)
    FI              reduce using rule 28 (expression -> LBRACKET expression RBRACKET .)


state 94

    (63) expression -> ID ASSIGN expression .
    (20) expression -> expression . LTHAN expression
    (21) expression -> expression . LETHAN expression
    (22) expression -> expression . EQUALS expression
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (45) dispatch -> expression . especific DOT dispatch_call
    (47) especific -> . DISP TYPE
    (48) especific -> . empty
    (53) empty -> .

  ! reduce/reduce conflict for DOT resolved using rule 53 (empty -> .)
    SEMICOLON       reduce using rule 63 (expression -> ID ASSIGN expression .)
    COMMA           reduce using rule 63 (expression -> ID ASSIGN expression .)
    IN              reduce using rule 63 (expression -> ID ASSIGN expression .)
    RBRACKET        reduce using rule 63 (expression -> ID ASSIGN expression .)
    THEN            reduce using rule 63 (expression -> ID ASSIGN expression .)
    LOOP            reduce using rule 63 (expression -> ID ASSIGN expression .)
    OF              reduce using rule 63 (expression -> ID ASSIGN expression .)
    ELSE            reduce using rule 63 (expression -> ID ASSIGN expression .)
    POOL            reduce using rule 63 (expression -> ID ASSIGN expression .)
    RBRACE          reduce using rule 63 (expression -> ID ASSIGN expression .)
    FI              reduce using rule 63 (expression -> ID ASSIGN expression .)
    LTHAN           shift and go to state 56
    LETHAN          shift and go to state 57
    EQUALS          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    DISP            shift and go to state 64
    DOT             reduce using rule 53 (empty -> .)

  ! LTHAN           [ reduce using rule 63 (expression -> ID ASSIGN expression .) ]
  ! LETHAN          [ reduce using rule 63 (expression -> ID ASSIGN expression .) ]
  ! EQUALS          [ reduce using rule 63 (expression -> ID ASSIGN expression .) ]
  ! PLUS            [ reduce using rule 63 (expression -> ID ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 63 (expression -> ID ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 63 (expression -> ID ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 63 (expression -> ID ASSIGN expression .) ]
  ! DISP            [ reduce using rule 63 (expression -> ID ASSIGN expression .) ]
  ! DOT             [ reduce using rule 63 (expression -> ID ASSIGN expression .) ]

    especific                      shift and go to state 63
    empty                          shift and go to state 65

state 95

    (49) dispatch_call -> ID LBRACKET params_expression . RBRACKET

    RBRACKET        shift and go to state 108


state 96

    (50) params_expression -> expression .
    (51) params_expression -> expression . COMMA params_expression
    (20) expression -> expression . LTHAN expression
    (21) expression -> expression . LETHAN expression
    (22) expression -> expression . EQUALS expression
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (45) dispatch -> expression . especific DOT dispatch_call
    (47) especific -> . DISP TYPE
    (48) especific -> . empty
    (53) empty -> .

    RBRACKET        reduce using rule 50 (params_expression -> expression .)
    COMMA           shift and go to state 109
    LTHAN           shift and go to state 56
    LETHAN          shift and go to state 57
    EQUALS          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    DISP            shift and go to state 64
    DOT             reduce using rule 53 (empty -> .)

    especific                      shift and go to state 63
    empty                          shift and go to state 65

state 97

    (52) params_expression -> empty .

    RBRACKET        reduce using rule 52 (params_expression -> empty .)


state 98

    (36) block -> LBRACE expression_list RBRACE .

    LTHAN           reduce using rule 36 (block -> LBRACE expression_list RBRACE .)
    LETHAN          reduce using rule 36 (block -> LBRACE expression_list RBRACE .)
    EQUALS          reduce using rule 36 (block -> LBRACE expression_list RBRACE .)
    PLUS            reduce using rule 36 (block -> LBRACE expression_list RBRACE .)
    MINUS           reduce using rule 36 (block -> LBRACE expression_list RBRACE .)
    TIMES           reduce using rule 36 (block -> LBRACE expression_list RBRACE .)
    DIVIDE          reduce using rule 36 (block -> LBRACE expression_list RBRACE .)
    DISP            reduce using rule 36 (block -> LBRACE expression_list RBRACE .)
    DOT             reduce using rule 36 (block -> LBRACE expression_list RBRACE .)
    SEMICOLON       reduce using rule 36 (block -> LBRACE expression_list RBRACE .)
    COMMA           reduce using rule 36 (block -> LBRACE expression_list RBRACE .)
    IN              reduce using rule 36 (block -> LBRACE expression_list RBRACE .)
    RBRACKET        reduce using rule 36 (block -> LBRACE expression_list RBRACE .)
    THEN            reduce using rule 36 (block -> LBRACE expression_list RBRACE .)
    LOOP            reduce using rule 36 (block -> LBRACE expression_list RBRACE .)
    OF              reduce using rule 36 (block -> LBRACE expression_list RBRACE .)
    ELSE            reduce using rule 36 (block -> LBRACE expression_list RBRACE .)
    POOL            reduce using rule 36 (block -> LBRACE expression_list RBRACE .)
    RBRACE          reduce using rule 36 (block -> LBRACE expression_list RBRACE .)
    FI              reduce using rule 36 (block -> LBRACE expression_list RBRACE .)


state 99

    (17) expression_list -> expression SEMICOLON . expression_list
    (18) expression_list -> expression SEMICOLON .
    (17) expression_list -> . expression SEMICOLON expression_list
    (18) expression_list -> . expression SEMICOLON
    (19) expression -> . NOT expression
    (20) expression -> . expression LTHAN expression
    (21) expression -> . expression LETHAN expression
    (22) expression -> . expression EQUALS expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . MINUS expression
    (28) expression -> . LBRACKET expression RBRACKET
    (29) expression -> . ISVOID expression
    (30) expression -> . block
    (31) expression -> . conditional
    (32) expression -> . loop
    (33) expression -> . case
    (34) expression -> . dispatch
    (35) expression -> . BCOMPLEMENT expression
    (37) expression -> . ID
    (38) expression -> . INTEGER
    (39) expression -> . STRING
    (40) expression -> . TRUE
    (41) expression -> . FALSE
    (42) expression -> . NEW TYPE
    (43) expression -> . MINUS let_expression
    (44) expression -> . let_expression
    (63) expression -> . ID ASSIGN expression
    (36) block -> . LBRACE expression_list RBRACE
    (57) conditional -> . IF expression THEN expression ELSE expression FI
    (58) loop -> . WHILE expression LOOP expression POOL
    (59) case -> . CASE expression OF implications ESAC
    (45) dispatch -> . expression especific DOT dispatch_call
    (46) dispatch -> . dispatch_call
    (54) let_expression -> . LET declaration_list IN expression
    (49) dispatch_call -> . ID LBRACKET params_expression RBRACKET

    RBRACE          reduce using rule 18 (expression_list -> expression SEMICOLON .)
    NOT             shift and go to state 31
    MINUS           shift and go to state 32
    LBRACKET        shift and go to state 33
    ISVOID          shift and go to state 34
    BCOMPLEMENT     shift and go to state 40
    ID              shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NEW             shift and go to state 46
    LBRACE          shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    CASE            shift and go to state 51
    LET             shift and go to state 53

    expression                     shift and go to state 76
    expression_list                shift and go to state 110
    block                          shift and go to state 35
    conditional                    shift and go to state 36
    loop                           shift and go to state 37
    case                           shift and go to state 38
    dispatch                       shift and go to state 39
    let_expression                 shift and go to state 47
    dispatch_call                  shift and go to state 52

state 100

    (57) conditional -> IF expression THEN . expression ELSE expression FI
    (19) expression -> . NOT expression
    (20) expression -> . expression LTHAN expression
    (21) expression -> . expression LETHAN expression
    (22) expression -> . expression EQUALS expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . MINUS expression
    (28) expression -> . LBRACKET expression RBRACKET
    (29) expression -> . ISVOID expression
    (30) expression -> . block
    (31) expression -> . conditional
    (32) expression -> . loop
    (33) expression -> . case
    (34) expression -> . dispatch
    (35) expression -> . BCOMPLEMENT expression
    (37) expression -> . ID
    (38) expression -> . INTEGER
    (39) expression -> . STRING
    (40) expression -> . TRUE
    (41) expression -> . FALSE
    (42) expression -> . NEW TYPE
    (43) expression -> . MINUS let_expression
    (44) expression -> . let_expression
    (63) expression -> . ID ASSIGN expression
    (36) block -> . LBRACE expression_list RBRACE
    (57) conditional -> . IF expression THEN expression ELSE expression FI
    (58) loop -> . WHILE expression LOOP expression POOL
    (59) case -> . CASE expression OF implications ESAC
    (45) dispatch -> . expression especific DOT dispatch_call
    (46) dispatch -> . dispatch_call
    (54) let_expression -> . LET declaration_list IN expression
    (49) dispatch_call -> . ID LBRACKET params_expression RBRACKET

    NOT             shift and go to state 31
    MINUS           shift and go to state 32
    LBRACKET        shift and go to state 33
    ISVOID          shift and go to state 34
    BCOMPLEMENT     shift and go to state 40
    ID              shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NEW             shift and go to state 46
    LBRACE          shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    CASE            shift and go to state 51
    LET             shift and go to state 53

    expression                     shift and go to state 111
    block                          shift and go to state 35
    conditional                    shift and go to state 36
    loop                           shift and go to state 37
    case                           shift and go to state 38
    dispatch                       shift and go to state 39
    let_expression                 shift and go to state 47
    dispatch_call                  shift and go to state 52

state 101

    (58) loop -> WHILE expression LOOP . expression POOL
    (19) expression -> . NOT expression
    (20) expression -> . expression LTHAN expression
    (21) expression -> . expression LETHAN expression
    (22) expression -> . expression EQUALS expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . MINUS expression
    (28) expression -> . LBRACKET expression RBRACKET
    (29) expression -> . ISVOID expression
    (30) expression -> . block
    (31) expression -> . conditional
    (32) expression -> . loop
    (33) expression -> . case
    (34) expression -> . dispatch
    (35) expression -> . BCOMPLEMENT expression
    (37) expression -> . ID
    (38) expression -> . INTEGER
    (39) expression -> . STRING
    (40) expression -> . TRUE
    (41) expression -> . FALSE
    (42) expression -> . NEW TYPE
    (43) expression -> . MINUS let_expression
    (44) expression -> . let_expression
    (63) expression -> . ID ASSIGN expression
    (36) block -> . LBRACE expression_list RBRACE
    (57) conditional -> . IF expression THEN expression ELSE expression FI
    (58) loop -> . WHILE expression LOOP expression POOL
    (59) case -> . CASE expression OF implications ESAC
    (45) dispatch -> . expression especific DOT dispatch_call
    (46) dispatch -> . dispatch_call
    (54) let_expression -> . LET declaration_list IN expression
    (49) dispatch_call -> . ID LBRACKET params_expression RBRACKET

    NOT             shift and go to state 31
    MINUS           shift and go to state 32
    LBRACKET        shift and go to state 33
    ISVOID          shift and go to state 34
    BCOMPLEMENT     shift and go to state 40
    ID              shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NEW             shift and go to state 46
    LBRACE          shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    CASE            shift and go to state 51
    LET             shift and go to state 53

    expression                     shift and go to state 112
    block                          shift and go to state 35
    conditional                    shift and go to state 36
    loop                           shift and go to state 37
    case                           shift and go to state 38
    dispatch                       shift and go to state 39
    let_expression                 shift and go to state 47
    dispatch_call                  shift and go to state 52

state 102

    (59) case -> CASE expression OF . implications ESAC
    (60) implications -> . implication SEMICOLON implications
    (61) implications -> . implication SEMICOLON
    (62) implication -> . id_type IMPLY expression
    (12) id_type -> . ID TDOTS TYPE

    ID              shift and go to state 25

    implications                   shift and go to state 113
    implication                    shift and go to state 114
    id_type                        shift and go to state 115

state 103

    (54) let_expression -> LET declaration_list IN . expression
    (19) expression -> . NOT expression
    (20) expression -> . expression LTHAN expression
    (21) expression -> . expression LETHAN expression
    (22) expression -> . expression EQUALS expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . MINUS expression
    (28) expression -> . LBRACKET expression RBRACKET
    (29) expression -> . ISVOID expression
    (30) expression -> . block
    (31) expression -> . conditional
    (32) expression -> . loop
    (33) expression -> . case
    (34) expression -> . dispatch
    (35) expression -> . BCOMPLEMENT expression
    (37) expression -> . ID
    (38) expression -> . INTEGER
    (39) expression -> . STRING
    (40) expression -> . TRUE
    (41) expression -> . FALSE
    (42) expression -> . NEW TYPE
    (43) expression -> . MINUS let_expression
    (44) expression -> . let_expression
    (63) expression -> . ID ASSIGN expression
    (36) block -> . LBRACE expression_list RBRACE
    (57) conditional -> . IF expression THEN expression ELSE expression FI
    (58) loop -> . WHILE expression LOOP expression POOL
    (59) case -> . CASE expression OF implications ESAC
    (45) dispatch -> . expression especific DOT dispatch_call
    (46) dispatch -> . dispatch_call
    (54) let_expression -> . LET declaration_list IN expression
    (49) dispatch_call -> . ID LBRACKET params_expression RBRACKET

    NOT             shift and go to state 31
    MINUS           shift and go to state 32
    LBRACKET        shift and go to state 33
    ISVOID          shift and go to state 34
    BCOMPLEMENT     shift and go to state 40
    ID              shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NEW             shift and go to state 46
    LBRACE          shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    CASE            shift and go to state 51
    LET             shift and go to state 53

    expression                     shift and go to state 116
    block                          shift and go to state 35
    conditional                    shift and go to state 36
    loop                           shift and go to state 37
    case                           shift and go to state 38
    dispatch                       shift and go to state 39
    let_expression                 shift and go to state 47
    dispatch_call                  shift and go to state 52

state 104

    (55) declaration_list -> attribute COMMA . declaration_list
    (55) declaration_list -> . attribute COMMA declaration_list
    (56) declaration_list -> . attribute
    (10) attribute -> . id_type
    (11) attribute -> . id_type ASSIGN expression
    (12) id_type -> . ID TDOTS TYPE

    ID              shift and go to state 25

    attribute                      shift and go to state 81
    declaration_list               shift and go to state 117
    id_type                        shift and go to state 18

state 105

    (13) method_declaration -> ID LBRACKET formals RBRACKET TDOTS TYPE . LBRACE expression RBRACE

    LBRACE          shift and go to state 118


state 106

    (45) dispatch -> expression especific DOT dispatch_call .

    LTHAN           reduce using rule 45 (dispatch -> expression especific DOT dispatch_call .)
    LETHAN          reduce using rule 45 (dispatch -> expression especific DOT dispatch_call .)
    EQUALS          reduce using rule 45 (dispatch -> expression especific DOT dispatch_call .)
    PLUS            reduce using rule 45 (dispatch -> expression especific DOT dispatch_call .)
    MINUS           reduce using rule 45 (dispatch -> expression especific DOT dispatch_call .)
    TIMES           reduce using rule 45 (dispatch -> expression especific DOT dispatch_call .)
    DIVIDE          reduce using rule 45 (dispatch -> expression especific DOT dispatch_call .)
    DISP            reduce using rule 45 (dispatch -> expression especific DOT dispatch_call .)
    DOT             reduce using rule 45 (dispatch -> expression especific DOT dispatch_call .)
    SEMICOLON       reduce using rule 45 (dispatch -> expression especific DOT dispatch_call .)
    COMMA           reduce using rule 45 (dispatch -> expression especific DOT dispatch_call .)
    IN              reduce using rule 45 (dispatch -> expression especific DOT dispatch_call .)
    RBRACKET        reduce using rule 45 (dispatch -> expression especific DOT dispatch_call .)
    THEN            reduce using rule 45 (dispatch -> expression especific DOT dispatch_call .)
    LOOP            reduce using rule 45 (dispatch -> expression especific DOT dispatch_call .)
    OF              reduce using rule 45 (dispatch -> expression especific DOT dispatch_call .)
    ELSE            reduce using rule 45 (dispatch -> expression especific DOT dispatch_call .)
    POOL            reduce using rule 45 (dispatch -> expression especific DOT dispatch_call .)
    RBRACE          reduce using rule 45 (dispatch -> expression especific DOT dispatch_call .)
    FI              reduce using rule 45 (dispatch -> expression especific DOT dispatch_call .)


state 107

    (49) dispatch_call -> ID . LBRACKET params_expression RBRACKET

    LBRACKET        shift and go to state 73


state 108

    (49) dispatch_call -> ID LBRACKET params_expression RBRACKET .

    LTHAN           reduce using rule 49 (dispatch_call -> ID LBRACKET params_expression RBRACKET .)
    LETHAN          reduce using rule 49 (dispatch_call -> ID LBRACKET params_expression RBRACKET .)
    EQUALS          reduce using rule 49 (dispatch_call -> ID LBRACKET params_expression RBRACKET .)
    PLUS            reduce using rule 49 (dispatch_call -> ID LBRACKET params_expression RBRACKET .)
    MINUS           reduce using rule 49 (dispatch_call -> ID LBRACKET params_expression RBRACKET .)
    TIMES           reduce using rule 49 (dispatch_call -> ID LBRACKET params_expression RBRACKET .)
    DIVIDE          reduce using rule 49 (dispatch_call -> ID LBRACKET params_expression RBRACKET .)
    DISP            reduce using rule 49 (dispatch_call -> ID LBRACKET params_expression RBRACKET .)
    DOT             reduce using rule 49 (dispatch_call -> ID LBRACKET params_expression RBRACKET .)
    SEMICOLON       reduce using rule 49 (dispatch_call -> ID LBRACKET params_expression RBRACKET .)
    COMMA           reduce using rule 49 (dispatch_call -> ID LBRACKET params_expression RBRACKET .)
    IN              reduce using rule 49 (dispatch_call -> ID LBRACKET params_expression RBRACKET .)
    RBRACKET        reduce using rule 49 (dispatch_call -> ID LBRACKET params_expression RBRACKET .)
    THEN            reduce using rule 49 (dispatch_call -> ID LBRACKET params_expression RBRACKET .)
    LOOP            reduce using rule 49 (dispatch_call -> ID LBRACKET params_expression RBRACKET .)
    OF              reduce using rule 49 (dispatch_call -> ID LBRACKET params_expression RBRACKET .)
    ELSE            reduce using rule 49 (dispatch_call -> ID LBRACKET params_expression RBRACKET .)
    POOL            reduce using rule 49 (dispatch_call -> ID LBRACKET params_expression RBRACKET .)
    RBRACE          reduce using rule 49 (dispatch_call -> ID LBRACKET params_expression RBRACKET .)
    FI              reduce using rule 49 (dispatch_call -> ID LBRACKET params_expression RBRACKET .)


state 109

    (51) params_expression -> expression COMMA . params_expression
    (50) params_expression -> . expression
    (51) params_expression -> . expression COMMA params_expression
    (52) params_expression -> . empty
    (19) expression -> . NOT expression
    (20) expression -> . expression LTHAN expression
    (21) expression -> . expression LETHAN expression
    (22) expression -> . expression EQUALS expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . MINUS expression
    (28) expression -> . LBRACKET expression RBRACKET
    (29) expression -> . ISVOID expression
    (30) expression -> . block
    (31) expression -> . conditional
    (32) expression -> . loop
    (33) expression -> . case
    (34) expression -> . dispatch
    (35) expression -> . BCOMPLEMENT expression
    (37) expression -> . ID
    (38) expression -> . INTEGER
    (39) expression -> . STRING
    (40) expression -> . TRUE
    (41) expression -> . FALSE
    (42) expression -> . NEW TYPE
    (43) expression -> . MINUS let_expression
    (44) expression -> . let_expression
    (63) expression -> . ID ASSIGN expression
    (53) empty -> .
    (36) block -> . LBRACE expression_list RBRACE
    (57) conditional -> . IF expression THEN expression ELSE expression FI
    (58) loop -> . WHILE expression LOOP expression POOL
    (59) case -> . CASE expression OF implications ESAC
    (45) dispatch -> . expression especific DOT dispatch_call
    (46) dispatch -> . dispatch_call
    (54) let_expression -> . LET declaration_list IN expression
    (49) dispatch_call -> . ID LBRACKET params_expression RBRACKET

    NOT             shift and go to state 31
    MINUS           shift and go to state 32
    LBRACKET        shift and go to state 33
    ISVOID          shift and go to state 34
    BCOMPLEMENT     shift and go to state 40
    ID              shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NEW             shift and go to state 46
    RBRACKET        reduce using rule 53 (empty -> .)
    LBRACE          shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    CASE            shift and go to state 51
    LET             shift and go to state 53

    expression                     shift and go to state 96
    params_expression              shift and go to state 119
    empty                          shift and go to state 97
    block                          shift and go to state 35
    conditional                    shift and go to state 36
    loop                           shift and go to state 37
    case                           shift and go to state 38
    dispatch                       shift and go to state 39
    let_expression                 shift and go to state 47
    dispatch_call                  shift and go to state 52

state 110

    (17) expression_list -> expression SEMICOLON expression_list .

    RBRACE          reduce using rule 17 (expression_list -> expression SEMICOLON expression_list .)


state 111

    (57) conditional -> IF expression THEN expression . ELSE expression FI
    (20) expression -> expression . LTHAN expression
    (21) expression -> expression . LETHAN expression
    (22) expression -> expression . EQUALS expression
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (45) dispatch -> expression . especific DOT dispatch_call
    (47) especific -> . DISP TYPE
    (48) especific -> . empty
    (53) empty -> .

    ELSE            shift and go to state 120
    LTHAN           shift and go to state 56
    LETHAN          shift and go to state 57
    EQUALS          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    DISP            shift and go to state 64
    DOT             reduce using rule 53 (empty -> .)

    especific                      shift and go to state 63
    empty                          shift and go to state 65

state 112

    (58) loop -> WHILE expression LOOP expression . POOL
    (20) expression -> expression . LTHAN expression
    (21) expression -> expression . LETHAN expression
    (22) expression -> expression . EQUALS expression
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (45) dispatch -> expression . especific DOT dispatch_call
    (47) especific -> . DISP TYPE
    (48) especific -> . empty
    (53) empty -> .

    POOL            shift and go to state 121
    LTHAN           shift and go to state 56
    LETHAN          shift and go to state 57
    EQUALS          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    DISP            shift and go to state 64
    DOT             reduce using rule 53 (empty -> .)

    especific                      shift and go to state 63
    empty                          shift and go to state 65

state 113

    (59) case -> CASE expression OF implications . ESAC

    ESAC            shift and go to state 122


state 114

    (60) implications -> implication . SEMICOLON implications
    (61) implications -> implication . SEMICOLON

    SEMICOLON       shift and go to state 123


state 115

    (62) implication -> id_type . IMPLY expression

    IMPLY           shift and go to state 124


state 116

    (54) let_expression -> LET declaration_list IN expression .
    (20) expression -> expression . LTHAN expression
    (21) expression -> expression . LETHAN expression
    (22) expression -> expression . EQUALS expression
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (45) dispatch -> expression . especific DOT dispatch_call
    (47) especific -> . DISP TYPE
    (48) especific -> . empty
    (53) empty -> .

  ! shift/reduce conflict for LTHAN resolved as shift
  ! shift/reduce conflict for LETHAN resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for DISP resolved as shift
  ! reduce/reduce conflict for DOT resolved using rule 53 (empty -> .)
    SEMICOLON       reduce using rule 54 (let_expression -> LET declaration_list IN expression .)
    COMMA           reduce using rule 54 (let_expression -> LET declaration_list IN expression .)
    IN              reduce using rule 54 (let_expression -> LET declaration_list IN expression .)
    RBRACKET        reduce using rule 54 (let_expression -> LET declaration_list IN expression .)
    THEN            reduce using rule 54 (let_expression -> LET declaration_list IN expression .)
    LOOP            reduce using rule 54 (let_expression -> LET declaration_list IN expression .)
    OF              reduce using rule 54 (let_expression -> LET declaration_list IN expression .)
    ELSE            reduce using rule 54 (let_expression -> LET declaration_list IN expression .)
    POOL            reduce using rule 54 (let_expression -> LET declaration_list IN expression .)
    RBRACE          reduce using rule 54 (let_expression -> LET declaration_list IN expression .)
    FI              reduce using rule 54 (let_expression -> LET declaration_list IN expression .)
    LTHAN           shift and go to state 56
    LETHAN          shift and go to state 57
    EQUALS          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    DISP            shift and go to state 64
    DOT             reduce using rule 53 (empty -> .)

  ! LTHAN           [ reduce using rule 54 (let_expression -> LET declaration_list IN expression .) ]
  ! LETHAN          [ reduce using rule 54 (let_expression -> LET declaration_list IN expression .) ]
  ! EQUALS          [ reduce using rule 54 (let_expression -> LET declaration_list IN expression .) ]
  ! PLUS            [ reduce using rule 54 (let_expression -> LET declaration_list IN expression .) ]
  ! MINUS           [ reduce using rule 54 (let_expression -> LET declaration_list IN expression .) ]
  ! TIMES           [ reduce using rule 54 (let_expression -> LET declaration_list IN expression .) ]
  ! DIVIDE          [ reduce using rule 54 (let_expression -> LET declaration_list IN expression .) ]
  ! DISP            [ reduce using rule 54 (let_expression -> LET declaration_list IN expression .) ]
  ! DOT             [ reduce using rule 54 (let_expression -> LET declaration_list IN expression .) ]

    especific                      shift and go to state 63
    empty                          shift and go to state 65

state 117

    (55) declaration_list -> attribute COMMA declaration_list .

    IN              reduce using rule 55 (declaration_list -> attribute COMMA declaration_list .)


state 118

    (13) method_declaration -> ID LBRACKET formals RBRACKET TDOTS TYPE LBRACE . expression RBRACE
    (19) expression -> . NOT expression
    (20) expression -> . expression LTHAN expression
    (21) expression -> . expression LETHAN expression
    (22) expression -> . expression EQUALS expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . MINUS expression
    (28) expression -> . LBRACKET expression RBRACKET
    (29) expression -> . ISVOID expression
    (30) expression -> . block
    (31) expression -> . conditional
    (32) expression -> . loop
    (33) expression -> . case
    (34) expression -> . dispatch
    (35) expression -> . BCOMPLEMENT expression
    (37) expression -> . ID
    (38) expression -> . INTEGER
    (39) expression -> . STRING
    (40) expression -> . TRUE
    (41) expression -> . FALSE
    (42) expression -> . NEW TYPE
    (43) expression -> . MINUS let_expression
    (44) expression -> . let_expression
    (63) expression -> . ID ASSIGN expression
    (36) block -> . LBRACE expression_list RBRACE
    (57) conditional -> . IF expression THEN expression ELSE expression FI
    (58) loop -> . WHILE expression LOOP expression POOL
    (59) case -> . CASE expression OF implications ESAC
    (45) dispatch -> . expression especific DOT dispatch_call
    (46) dispatch -> . dispatch_call
    (54) let_expression -> . LET declaration_list IN expression
    (49) dispatch_call -> . ID LBRACKET params_expression RBRACKET

    NOT             shift and go to state 31
    MINUS           shift and go to state 32
    LBRACKET        shift and go to state 33
    ISVOID          shift and go to state 34
    BCOMPLEMENT     shift and go to state 40
    ID              shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NEW             shift and go to state 46
    LBRACE          shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    CASE            shift and go to state 51
    LET             shift and go to state 53

    expression                     shift and go to state 125
    block                          shift and go to state 35
    conditional                    shift and go to state 36
    loop                           shift and go to state 37
    case                           shift and go to state 38
    dispatch                       shift and go to state 39
    let_expression                 shift and go to state 47
    dispatch_call                  shift and go to state 52

state 119

    (51) params_expression -> expression COMMA params_expression .

    RBRACKET        reduce using rule 51 (params_expression -> expression COMMA params_expression .)


state 120

    (57) conditional -> IF expression THEN expression ELSE . expression FI
    (19) expression -> . NOT expression
    (20) expression -> . expression LTHAN expression
    (21) expression -> . expression LETHAN expression
    (22) expression -> . expression EQUALS expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . MINUS expression
    (28) expression -> . LBRACKET expression RBRACKET
    (29) expression -> . ISVOID expression
    (30) expression -> . block
    (31) expression -> . conditional
    (32) expression -> . loop
    (33) expression -> . case
    (34) expression -> . dispatch
    (35) expression -> . BCOMPLEMENT expression
    (37) expression -> . ID
    (38) expression -> . INTEGER
    (39) expression -> . STRING
    (40) expression -> . TRUE
    (41) expression -> . FALSE
    (42) expression -> . NEW TYPE
    (43) expression -> . MINUS let_expression
    (44) expression -> . let_expression
    (63) expression -> . ID ASSIGN expression
    (36) block -> . LBRACE expression_list RBRACE
    (57) conditional -> . IF expression THEN expression ELSE expression FI
    (58) loop -> . WHILE expression LOOP expression POOL
    (59) case -> . CASE expression OF implications ESAC
    (45) dispatch -> . expression especific DOT dispatch_call
    (46) dispatch -> . dispatch_call
    (54) let_expression -> . LET declaration_list IN expression
    (49) dispatch_call -> . ID LBRACKET params_expression RBRACKET

    NOT             shift and go to state 31
    MINUS           shift and go to state 32
    LBRACKET        shift and go to state 33
    ISVOID          shift and go to state 34
    BCOMPLEMENT     shift and go to state 40
    ID              shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NEW             shift and go to state 46
    LBRACE          shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    CASE            shift and go to state 51
    LET             shift and go to state 53

    expression                     shift and go to state 126
    block                          shift and go to state 35
    conditional                    shift and go to state 36
    loop                           shift and go to state 37
    case                           shift and go to state 38
    dispatch                       shift and go to state 39
    let_expression                 shift and go to state 47
    dispatch_call                  shift and go to state 52

state 121

    (58) loop -> WHILE expression LOOP expression POOL .

    LTHAN           reduce using rule 58 (loop -> WHILE expression LOOP expression POOL .)
    LETHAN          reduce using rule 58 (loop -> WHILE expression LOOP expression POOL .)
    EQUALS          reduce using rule 58 (loop -> WHILE expression LOOP expression POOL .)
    PLUS            reduce using rule 58 (loop -> WHILE expression LOOP expression POOL .)
    MINUS           reduce using rule 58 (loop -> WHILE expression LOOP expression POOL .)
    TIMES           reduce using rule 58 (loop -> WHILE expression LOOP expression POOL .)
    DIVIDE          reduce using rule 58 (loop -> WHILE expression LOOP expression POOL .)
    DISP            reduce using rule 58 (loop -> WHILE expression LOOP expression POOL .)
    DOT             reduce using rule 58 (loop -> WHILE expression LOOP expression POOL .)
    SEMICOLON       reduce using rule 58 (loop -> WHILE expression LOOP expression POOL .)
    COMMA           reduce using rule 58 (loop -> WHILE expression LOOP expression POOL .)
    IN              reduce using rule 58 (loop -> WHILE expression LOOP expression POOL .)
    RBRACKET        reduce using rule 58 (loop -> WHILE expression LOOP expression POOL .)
    THEN            reduce using rule 58 (loop -> WHILE expression LOOP expression POOL .)
    LOOP            reduce using rule 58 (loop -> WHILE expression LOOP expression POOL .)
    OF              reduce using rule 58 (loop -> WHILE expression LOOP expression POOL .)
    ELSE            reduce using rule 58 (loop -> WHILE expression LOOP expression POOL .)
    POOL            reduce using rule 58 (loop -> WHILE expression LOOP expression POOL .)
    RBRACE          reduce using rule 58 (loop -> WHILE expression LOOP expression POOL .)
    FI              reduce using rule 58 (loop -> WHILE expression LOOP expression POOL .)


state 122

    (59) case -> CASE expression OF implications ESAC .

    LTHAN           reduce using rule 59 (case -> CASE expression OF implications ESAC .)
    LETHAN          reduce using rule 59 (case -> CASE expression OF implications ESAC .)
    EQUALS          reduce using rule 59 (case -> CASE expression OF implications ESAC .)
    PLUS            reduce using rule 59 (case -> CASE expression OF implications ESAC .)
    MINUS           reduce using rule 59 (case -> CASE expression OF implications ESAC .)
    TIMES           reduce using rule 59 (case -> CASE expression OF implications ESAC .)
    DIVIDE          reduce using rule 59 (case -> CASE expression OF implications ESAC .)
    DISP            reduce using rule 59 (case -> CASE expression OF implications ESAC .)
    DOT             reduce using rule 59 (case -> CASE expression OF implications ESAC .)
    SEMICOLON       reduce using rule 59 (case -> CASE expression OF implications ESAC .)
    COMMA           reduce using rule 59 (case -> CASE expression OF implications ESAC .)
    IN              reduce using rule 59 (case -> CASE expression OF implications ESAC .)
    RBRACKET        reduce using rule 59 (case -> CASE expression OF implications ESAC .)
    THEN            reduce using rule 59 (case -> CASE expression OF implications ESAC .)
    LOOP            reduce using rule 59 (case -> CASE expression OF implications ESAC .)
    OF              reduce using rule 59 (case -> CASE expression OF implications ESAC .)
    ELSE            reduce using rule 59 (case -> CASE expression OF implications ESAC .)
    POOL            reduce using rule 59 (case -> CASE expression OF implications ESAC .)
    RBRACE          reduce using rule 59 (case -> CASE expression OF implications ESAC .)
    FI              reduce using rule 59 (case -> CASE expression OF implications ESAC .)


state 123

    (60) implications -> implication SEMICOLON . implications
    (61) implications -> implication SEMICOLON .
    (60) implications -> . implication SEMICOLON implications
    (61) implications -> . implication SEMICOLON
    (62) implication -> . id_type IMPLY expression
    (12) id_type -> . ID TDOTS TYPE

    ESAC            reduce using rule 61 (implications -> implication SEMICOLON .)
    ID              shift and go to state 25

    implication                    shift and go to state 114
    implications                   shift and go to state 127
    id_type                        shift and go to state 115

state 124

    (62) implication -> id_type IMPLY . expression
    (19) expression -> . NOT expression
    (20) expression -> . expression LTHAN expression
    (21) expression -> . expression LETHAN expression
    (22) expression -> . expression EQUALS expression
    (23) expression -> . expression PLUS expression
    (24) expression -> . expression MINUS expression
    (25) expression -> . expression TIMES expression
    (26) expression -> . expression DIVIDE expression
    (27) expression -> . MINUS expression
    (28) expression -> . LBRACKET expression RBRACKET
    (29) expression -> . ISVOID expression
    (30) expression -> . block
    (31) expression -> . conditional
    (32) expression -> . loop
    (33) expression -> . case
    (34) expression -> . dispatch
    (35) expression -> . BCOMPLEMENT expression
    (37) expression -> . ID
    (38) expression -> . INTEGER
    (39) expression -> . STRING
    (40) expression -> . TRUE
    (41) expression -> . FALSE
    (42) expression -> . NEW TYPE
    (43) expression -> . MINUS let_expression
    (44) expression -> . let_expression
    (63) expression -> . ID ASSIGN expression
    (36) block -> . LBRACE expression_list RBRACE
    (57) conditional -> . IF expression THEN expression ELSE expression FI
    (58) loop -> . WHILE expression LOOP expression POOL
    (59) case -> . CASE expression OF implications ESAC
    (45) dispatch -> . expression especific DOT dispatch_call
    (46) dispatch -> . dispatch_call
    (54) let_expression -> . LET declaration_list IN expression
    (49) dispatch_call -> . ID LBRACKET params_expression RBRACKET

    NOT             shift and go to state 31
    MINUS           shift and go to state 32
    LBRACKET        shift and go to state 33
    ISVOID          shift and go to state 34
    BCOMPLEMENT     shift and go to state 40
    ID              shift and go to state 41
    INTEGER         shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    NEW             shift and go to state 46
    LBRACE          shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    CASE            shift and go to state 51
    LET             shift and go to state 53

    expression                     shift and go to state 128
    block                          shift and go to state 35
    conditional                    shift and go to state 36
    loop                           shift and go to state 37
    case                           shift and go to state 38
    dispatch                       shift and go to state 39
    let_expression                 shift and go to state 47
    dispatch_call                  shift and go to state 52

state 125

    (13) method_declaration -> ID LBRACKET formals RBRACKET TDOTS TYPE LBRACE expression . RBRACE
    (20) expression -> expression . LTHAN expression
    (21) expression -> expression . LETHAN expression
    (22) expression -> expression . EQUALS expression
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (45) dispatch -> expression . especific DOT dispatch_call
    (47) especific -> . DISP TYPE
    (48) especific -> . empty
    (53) empty -> .

    RBRACE          shift and go to state 129
    LTHAN           shift and go to state 56
    LETHAN          shift and go to state 57
    EQUALS          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    DISP            shift and go to state 64
    DOT             reduce using rule 53 (empty -> .)

    especific                      shift and go to state 63
    empty                          shift and go to state 65

state 126

    (57) conditional -> IF expression THEN expression ELSE expression . FI
    (20) expression -> expression . LTHAN expression
    (21) expression -> expression . LETHAN expression
    (22) expression -> expression . EQUALS expression
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (45) dispatch -> expression . especific DOT dispatch_call
    (47) especific -> . DISP TYPE
    (48) especific -> . empty
    (53) empty -> .

    FI              shift and go to state 130
    LTHAN           shift and go to state 56
    LETHAN          shift and go to state 57
    EQUALS          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    DISP            shift and go to state 64
    DOT             reduce using rule 53 (empty -> .)

    especific                      shift and go to state 63
    empty                          shift and go to state 65

state 127

    (60) implications -> implication SEMICOLON implications .

    ESAC            reduce using rule 60 (implications -> implication SEMICOLON implications .)


state 128

    (62) implication -> id_type IMPLY expression .
    (20) expression -> expression . LTHAN expression
    (21) expression -> expression . LETHAN expression
    (22) expression -> expression . EQUALS expression
    (23) expression -> expression . PLUS expression
    (24) expression -> expression . MINUS expression
    (25) expression -> expression . TIMES expression
    (26) expression -> expression . DIVIDE expression
    (45) dispatch -> expression . especific DOT dispatch_call
    (47) especific -> . DISP TYPE
    (48) especific -> . empty
    (53) empty -> .

    SEMICOLON       reduce using rule 62 (implication -> id_type IMPLY expression .)
    LTHAN           shift and go to state 56
    LETHAN          shift and go to state 57
    EQUALS          shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    DISP            shift and go to state 64
    DOT             reduce using rule 53 (empty -> .)

    especific                      shift and go to state 63
    empty                          shift and go to state 65

state 129

    (13) method_declaration -> ID LBRACKET formals RBRACKET TDOTS TYPE LBRACE expression RBRACE .

    SEMICOLON       reduce using rule 13 (method_declaration -> ID LBRACKET formals RBRACKET TDOTS TYPE LBRACE expression RBRACE .)


state 130

    (57) conditional -> IF expression THEN expression ELSE expression FI .

    LTHAN           reduce using rule 57 (conditional -> IF expression THEN expression ELSE expression FI .)
    LETHAN          reduce using rule 57 (conditional -> IF expression THEN expression ELSE expression FI .)
    EQUALS          reduce using rule 57 (conditional -> IF expression THEN expression ELSE expression FI .)
    PLUS            reduce using rule 57 (conditional -> IF expression THEN expression ELSE expression FI .)
    MINUS           reduce using rule 57 (conditional -> IF expression THEN expression ELSE expression FI .)
    TIMES           reduce using rule 57 (conditional -> IF expression THEN expression ELSE expression FI .)
    DIVIDE          reduce using rule 57 (conditional -> IF expression THEN expression ELSE expression FI .)
    DISP            reduce using rule 57 (conditional -> IF expression THEN expression ELSE expression FI .)
    DOT             reduce using rule 57 (conditional -> IF expression THEN expression ELSE expression FI .)
    SEMICOLON       reduce using rule 57 (conditional -> IF expression THEN expression ELSE expression FI .)
    COMMA           reduce using rule 57 (conditional -> IF expression THEN expression ELSE expression FI .)
    IN              reduce using rule 57 (conditional -> IF expression THEN expression ELSE expression FI .)
    RBRACKET        reduce using rule 57 (conditional -> IF expression THEN expression ELSE expression FI .)
    THEN            reduce using rule 57 (conditional -> IF expression THEN expression ELSE expression FI .)
    LOOP            reduce using rule 57 (conditional -> IF expression THEN expression ELSE expression FI .)
    OF              reduce using rule 57 (conditional -> IF expression THEN expression ELSE expression FI .)
    ELSE            reduce using rule 57 (conditional -> IF expression THEN expression ELSE expression FI .)
    POOL            reduce using rule 57 (conditional -> IF expression THEN expression ELSE expression FI .)
    RBRACE          reduce using rule 57 (conditional -> IF expression THEN expression ELSE expression FI .)
    FI              reduce using rule 57 (conditional -> IF expression THEN expression ELSE expression FI .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LTHAN in state 116 resolved as shift
WARNING: shift/reduce conflict for LETHAN in state 116 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 116 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 116 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 116 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 116 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 116 resolved as shift
WARNING: shift/reduce conflict for DISP in state 116 resolved as shift
WARNING: reduce/reduce conflict in state 66 resolved using rule (expression -> NOT expression)
WARNING: rejected rule (empty -> <empty>) in state 66
WARNING: reduce/reduce conflict in state 67 resolved using rule (expression -> MINUS expression)
WARNING: rejected rule (empty -> <empty>) in state 67
WARNING: reduce/reduce conflict in state 68 resolved using rule (expression -> MINUS let_expression)
WARNING: rejected rule (expression -> let_expression) in state 68
WARNING: reduce/reduce conflict in state 70 resolved using rule (expression -> ISVOID expression)
WARNING: rejected rule (empty -> <empty>) in state 70
WARNING: reduce/reduce conflict in state 71 resolved using rule (expression -> BCOMPLEMENT expression)
WARNING: rejected rule (empty -> <empty>) in state 71
WARNING: reduce/reduce conflict in state 84 resolved using rule (expression -> expression LTHAN expression)
WARNING: rejected rule (empty -> <empty>) in state 84
WARNING: reduce/reduce conflict in state 85 resolved using rule (expression -> expression LETHAN expression)
WARNING: rejected rule (empty -> <empty>) in state 85
WARNING: reduce/reduce conflict in state 86 resolved using rule (expression -> expression EQUALS expression)
WARNING: rejected rule (empty -> <empty>) in state 86
WARNING: reduce/reduce conflict in state 87 resolved using rule (expression -> expression PLUS expression)
WARNING: rejected rule (empty -> <empty>) in state 87
WARNING: reduce/reduce conflict in state 88 resolved using rule (expression -> expression MINUS expression)
WARNING: rejected rule (empty -> <empty>) in state 88
WARNING: reduce/reduce conflict in state 89 resolved using rule (expression -> expression TIMES expression)
WARNING: rejected rule (empty -> <empty>) in state 89
WARNING: reduce/reduce conflict in state 90 resolved using rule (expression -> expression DIVIDE expression)
WARNING: rejected rule (empty -> <empty>) in state 90
WARNING: reduce/reduce conflict in state 94 resolved using rule (empty -> <empty>)
WARNING: rejected rule (expression -> ID ASSIGN expression) in state 94
WARNING: reduce/reduce conflict in state 116 resolved using rule (empty -> <empty>)
WARNING: rejected rule (let_expression -> LET declaration_list IN expression) in state 116
