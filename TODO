Todo Clases:
    -Las clases empiezan con mayúsculas
    -Las clases no se deben redefinir
    -All attributes have scope local
to the class, and all methods have global scope. Thus, the only way to provide access to object state in
Cool is through methods.
    -Feature names must begin with a lowercase letter.
    -No method name may be defined multiple times in
a class, and no attribute name may be defined multiple times in a class, but a method and an attribute
may have the same name.

Todo Inheritence:
    -The semantics of C inherits P is that C has all of the features defined in P in addition to its own
    features.
    -In the case that a parent and child both define the same method name, then the definition
given in the child class takes precedence.
    -It is illegal to redefine attribute names.
    -for type
safety, it is necessary to place some restrictions on how methods may be redefined
    -There is a distinguished class Object.
    -If a class definition does not specify a parent class, then the
class inherits from Object by default.
    -single inheritance.
    -The parent-child relation on classes defines a graph. This graph may not contain
cycles.
    -In addition to Object, Cool has four other basic classes: Int, String, Bool, and IO.

Todo on checksemanticks:
    - recorrer el ast buscando todos los tipos y agregandolos al contexto(Buscar definiciones de tipos)
    - recorrer el ast agregando a cada clase los atributos y los metodos(asociar metodos y atributos)
    - entrar en el cuerpo de los metodos...(semantica)
    - Tema de la recuperacion de errores

Todo a preguntar
- Cómo va a ser el tema de la recuperación de errores
- EL null aca como se representa
- los valores por defecto de cada una de las clases(pudiera agregar a la clase type un
    campo que esa el valor por defecto en el acso de las clases int,str,bool)
- los métodos de las clases q vienen con cool (Int,str,bool)
- las operaciones binarias y unarias se pueden realizar entre clases creadas?


TypeCheckerVisitor
 - en cada nodo verificar si todas las operaciones que se realizan son correctas:
    -guardar en el scope correspondiente las declaraciones de variables:
        - Los parámetros de los métodos
        - Los atributos de la clase
        - Las variables locales
